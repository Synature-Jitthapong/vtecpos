package com.vtec.j1tth4.vtecpos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vtec.j1tth4.vtecpos.dao.Document;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Document.
*/
public class DocumentDao extends AbstractDao<Document, Integer> {

    public static final String TABLENAME = "Document";

    /**
     * Properties of entity Document.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property DocumentID = new Property(0, Integer.class, "DocumentID", true, "DocumentID");
        public final static Property ShopID = new Property(1, Integer.class, "ShopID", false, "ShopID");
        public final static Property VendorID = new Property(2, Integer.class, "VendorID", false, "VendorID");
        public final static Property VendorGroupID = new Property(3, Integer.class, "VendorGroupID", false, "VendorGroupID");
        public final static Property VendorShopID = new Property(4, Integer.class, "VendorShopID", false, "VendorShopID");
        public final static Property DocumentTypeID = new Property(5, Integer.class, "DocumentTypeID", false, "DocumentTypeID");
        public final static Property DocumentYear = new Property(6, Integer.class, "DocumentYear", false, "DocumentYear");
        public final static Property DocumentMonth = new Property(7, Integer.class, "DocumentMonth", false, "DocumentMonth");
        public final static Property DocumentNumber = new Property(8, Integer.class, "DocumentNumber", false, "DocumentNumber");
        public final static Property DocumentDate = new Property(9, java.util.Date.class, "DocumentDate", false, "DocumentDate");
        public final static Property InputBy = new Property(10, Integer.class, "InputBy", false, "InputBy");
        public final static Property UpdateBy = new Property(11, Integer.class, "UpdateBy", false, "UpdateBy");
        public final static Property ApproveBy = new Property(12, Integer.class, "ApproveBy", false, "ApproveBy");
        public final static Property VoidBy = new Property(13, Integer.class, "VoidBy", false, "VoidBy");
        public final static Property ReceiveBy = new Property(14, Integer.class, "ReceiveBy", false, "ReceiveBy");
        public final static Property DocumentStatus = new Property(15, Integer.class, "DocumentStatus", false, "DocumentStatus");
        public final static Property InvoiceRef = new Property(16, Integer.class, "InvoiceRef", false, "InvoiceRef");
        public final static Property DocumentUDDID = new Property(17, String.class, "DocumentUDDID", false, "DocumentUDDID");
        public final static Property DocumentIDRef = new Property(18, Integer.class, "DocumentIDRef", false, "DocumentIDRef");
        public final static Property DocIDRefShopID = new Property(19, Integer.class, "DocIDRefShopID", false, "DocIDRefShopID");
        public final static Property InventoryID = new Property(20, Integer.class, "InventoryID", false, "InventoryID");
        public final static Property ToInvID = new Property(21, Integer.class, "ToInvID", false, "ToInvID");
        public final static Property FromInvID = new Property(22, Integer.class, "FromInvID", false, "FromInvID");
        public final static Property FromTemplateID = new Property(23, Integer.class, "FromTemplateID", false, "FromTemplateID");
        public final static Property FromTemplateShopID = new Property(24, Integer.class, "FromTemplateShopID", false, "FromTemplateShopID");
        public final static Property IsSmallUnit = new Property(25, Integer.class, "IsSmallUnit", false, "IsSmallUnit");
        public final static Property Remark = new Property(26, String.class, "Remark", false, "Remark");
        public final static Property TermOfPayment = new Property(27, Integer.class, "TermOfPayment", false, "TermOfPayment");
        public final static Property DueDate = new Property(28, java.util.Date.class, "DueDate", false, "DueDate");
        public final static Property DocumentHeader = new Property(29, String.class, "DocumentHeader", false, "DocumentHeader");
        public final static Property CreditDay = new Property(30, Integer.class, "CreditDay", false, "CreditDay");
        public final static Property InsertDate = new Property(31, java.util.Date.class, "InsertDate", false, "InsertDate");
        public final static Property UpdateDate = new Property(32, java.util.Date.class, "UpdateDate", false, "UpdateDate");
        public final static Property ApproveDate = new Property(33, java.util.Date.class, "ApproveDate", false, "ApproveDate");
        public final static Property CancelDate = new Property(34, java.util.Date.class, "CancelDate", false, "CancelDate");
        public final static Property NewSend = new Property(35, Integer.class, "NewSend", false, "NewSend");
        public final static Property CurrentAccessStaff = new Property(36, Integer.class, "CurrentAccessStaff", false, "CurrentAccessStaff");
        public final static Property OtherPercentDiscount = new Property(37, Double.class, "OtherPercentDiscount", false, "OtherPercentDiscount");
        public final static Property OtherAmountDiscount = new Property(38, Double.class, "OtherAmountDiscount", false, "OtherAmountDiscount");
        public final static Property DocumentVATType = new Property(39, Integer.class, "DocumentVATType", false, "DocumentVATType");
        public final static Property VATPercent = new Property(40, Double.class, "VATPercent", false, "VATPercent");
        public final static Property LockEditDetail = new Property(41, Integer.class, "LockEditDetail", false, "LockEditDetail");
        public final static Property DocumentBatchID = new Property(42, Integer.class, "DocumentBatchID", false, "DocumentBatchID");
        public final static Property DocumentBatchShopID = new Property(43, Integer.class, "DocumentBatchShopID", false, "DocumentBatchShopID");
        public final static Property AlreadyExportToHQ = new Property(44, Integer.class, "AlreadyExportToHQ", false, "AlreadyExportToHQ");
        public final static Property AlreadyExportToBranch = new Property(45, Integer.class, "AlreadyExportToBranch", false, "AlreadyExportToBranch");
        public final static Property IsUpdateDocDetail = new Property(46, Integer.class, "IsUpdateDocDetail", false, "IsUpdateDocDetail");
    };


    public DocumentDao(DaoConfig config) {
        super(config);
    }
    
    public DocumentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Document entity) {
        stmt.clearBindings();
 
        Integer DocumentID = entity.getDocumentID();
        if (DocumentID != null) {
            stmt.bindLong(1, DocumentID);
        }
 
        Integer ShopID = entity.getShopID();
        if (ShopID != null) {
            stmt.bindLong(2, ShopID);
        }
 
        Integer VendorID = entity.getVendorID();
        if (VendorID != null) {
            stmt.bindLong(3, VendorID);
        }
 
        Integer VendorGroupID = entity.getVendorGroupID();
        if (VendorGroupID != null) {
            stmt.bindLong(4, VendorGroupID);
        }
 
        Integer VendorShopID = entity.getVendorShopID();
        if (VendorShopID != null) {
            stmt.bindLong(5, VendorShopID);
        }
 
        Integer DocumentTypeID = entity.getDocumentTypeID();
        if (DocumentTypeID != null) {
            stmt.bindLong(6, DocumentTypeID);
        }
 
        Integer DocumentYear = entity.getDocumentYear();
        if (DocumentYear != null) {
            stmt.bindLong(7, DocumentYear);
        }
 
        Integer DocumentMonth = entity.getDocumentMonth();
        if (DocumentMonth != null) {
            stmt.bindLong(8, DocumentMonth);
        }
 
        Integer DocumentNumber = entity.getDocumentNumber();
        if (DocumentNumber != null) {
            stmt.bindLong(9, DocumentNumber);
        }
 
        java.util.Date DocumentDate = entity.getDocumentDate();
        if (DocumentDate != null) {
            stmt.bindLong(10, DocumentDate.getTime());
        }
 
        Integer InputBy = entity.getInputBy();
        if (InputBy != null) {
            stmt.bindLong(11, InputBy);
        }
 
        Integer UpdateBy = entity.getUpdateBy();
        if (UpdateBy != null) {
            stmt.bindLong(12, UpdateBy);
        }
 
        Integer ApproveBy = entity.getApproveBy();
        if (ApproveBy != null) {
            stmt.bindLong(13, ApproveBy);
        }
 
        Integer VoidBy = entity.getVoidBy();
        if (VoidBy != null) {
            stmt.bindLong(14, VoidBy);
        }
 
        Integer ReceiveBy = entity.getReceiveBy();
        if (ReceiveBy != null) {
            stmt.bindLong(15, ReceiveBy);
        }
 
        Integer DocumentStatus = entity.getDocumentStatus();
        if (DocumentStatus != null) {
            stmt.bindLong(16, DocumentStatus);
        }
 
        Integer InvoiceRef = entity.getInvoiceRef();
        if (InvoiceRef != null) {
            stmt.bindLong(17, InvoiceRef);
        }
 
        String DocumentUDDID = entity.getDocumentUDDID();
        if (DocumentUDDID != null) {
            stmt.bindString(18, DocumentUDDID);
        }
 
        Integer DocumentIDRef = entity.getDocumentIDRef();
        if (DocumentIDRef != null) {
            stmt.bindLong(19, DocumentIDRef);
        }
 
        Integer DocIDRefShopID = entity.getDocIDRefShopID();
        if (DocIDRefShopID != null) {
            stmt.bindLong(20, DocIDRefShopID);
        }
 
        Integer InventoryID = entity.getInventoryID();
        if (InventoryID != null) {
            stmt.bindLong(21, InventoryID);
        }
 
        Integer ToInvID = entity.getToInvID();
        if (ToInvID != null) {
            stmt.bindLong(22, ToInvID);
        }
 
        Integer FromInvID = entity.getFromInvID();
        if (FromInvID != null) {
            stmt.bindLong(23, FromInvID);
        }
 
        Integer FromTemplateID = entity.getFromTemplateID();
        if (FromTemplateID != null) {
            stmt.bindLong(24, FromTemplateID);
        }
 
        Integer FromTemplateShopID = entity.getFromTemplateShopID();
        if (FromTemplateShopID != null) {
            stmt.bindLong(25, FromTemplateShopID);
        }
 
        Integer IsSmallUnit = entity.getIsSmallUnit();
        if (IsSmallUnit != null) {
            stmt.bindLong(26, IsSmallUnit);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(27, Remark);
        }
 
        Integer TermOfPayment = entity.getTermOfPayment();
        if (TermOfPayment != null) {
            stmt.bindLong(28, TermOfPayment);
        }
 
        java.util.Date DueDate = entity.getDueDate();
        if (DueDate != null) {
            stmt.bindLong(29, DueDate.getTime());
        }
 
        String DocumentHeader = entity.getDocumentHeader();
        if (DocumentHeader != null) {
            stmt.bindString(30, DocumentHeader);
        }
 
        Integer CreditDay = entity.getCreditDay();
        if (CreditDay != null) {
            stmt.bindLong(31, CreditDay);
        }
 
        java.util.Date InsertDate = entity.getInsertDate();
        if (InsertDate != null) {
            stmt.bindLong(32, InsertDate.getTime());
        }
 
        java.util.Date UpdateDate = entity.getUpdateDate();
        if (UpdateDate != null) {
            stmt.bindLong(33, UpdateDate.getTime());
        }
 
        java.util.Date ApproveDate = entity.getApproveDate();
        if (ApproveDate != null) {
            stmt.bindLong(34, ApproveDate.getTime());
        }
 
        java.util.Date CancelDate = entity.getCancelDate();
        if (CancelDate != null) {
            stmt.bindLong(35, CancelDate.getTime());
        }
 
        Integer NewSend = entity.getNewSend();
        if (NewSend != null) {
            stmt.bindLong(36, NewSend);
        }
 
        Integer CurrentAccessStaff = entity.getCurrentAccessStaff();
        if (CurrentAccessStaff != null) {
            stmt.bindLong(37, CurrentAccessStaff);
        }
 
        Double OtherPercentDiscount = entity.getOtherPercentDiscount();
        if (OtherPercentDiscount != null) {
            stmt.bindDouble(38, OtherPercentDiscount);
        }
 
        Double OtherAmountDiscount = entity.getOtherAmountDiscount();
        if (OtherAmountDiscount != null) {
            stmt.bindDouble(39, OtherAmountDiscount);
        }
 
        Integer DocumentVATType = entity.getDocumentVATType();
        if (DocumentVATType != null) {
            stmt.bindLong(40, DocumentVATType);
        }
 
        Double VATPercent = entity.getVATPercent();
        if (VATPercent != null) {
            stmt.bindDouble(41, VATPercent);
        }
 
        Integer LockEditDetail = entity.getLockEditDetail();
        if (LockEditDetail != null) {
            stmt.bindLong(42, LockEditDetail);
        }
 
        Integer DocumentBatchID = entity.getDocumentBatchID();
        if (DocumentBatchID != null) {
            stmt.bindLong(43, DocumentBatchID);
        }
 
        Integer DocumentBatchShopID = entity.getDocumentBatchShopID();
        if (DocumentBatchShopID != null) {
            stmt.bindLong(44, DocumentBatchShopID);
        }
 
        Integer AlreadyExportToHQ = entity.getAlreadyExportToHQ();
        if (AlreadyExportToHQ != null) {
            stmt.bindLong(45, AlreadyExportToHQ);
        }
 
        Integer AlreadyExportToBranch = entity.getAlreadyExportToBranch();
        if (AlreadyExportToBranch != null) {
            stmt.bindLong(46, AlreadyExportToBranch);
        }
 
        Integer IsUpdateDocDetail = entity.getIsUpdateDocDetail();
        if (IsUpdateDocDetail != null) {
            stmt.bindLong(47, IsUpdateDocDetail);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Document readEntity(Cursor cursor, int offset) {
        Document entity = new Document( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // DocumentID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // ShopID
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // VendorID
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // VendorGroupID
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // VendorShopID
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // DocumentTypeID
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // DocumentYear
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // DocumentMonth
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // DocumentNumber
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // DocumentDate
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // InputBy
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // UpdateBy
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // ApproveBy
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // VoidBy
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // ReceiveBy
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // DocumentStatus
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // InvoiceRef
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // DocumentUDDID
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // DocumentIDRef
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // DocIDRefShopID
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // InventoryID
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // ToInvID
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // FromInvID
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // FromTemplateID
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // FromTemplateShopID
            cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25), // IsSmallUnit
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // Remark
            cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27), // TermOfPayment
            cursor.isNull(offset + 28) ? null : new java.util.Date(cursor.getLong(offset + 28)), // DueDate
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // DocumentHeader
            cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30), // CreditDay
            cursor.isNull(offset + 31) ? null : new java.util.Date(cursor.getLong(offset + 31)), // InsertDate
            cursor.isNull(offset + 32) ? null : new java.util.Date(cursor.getLong(offset + 32)), // UpdateDate
            cursor.isNull(offset + 33) ? null : new java.util.Date(cursor.getLong(offset + 33)), // ApproveDate
            cursor.isNull(offset + 34) ? null : new java.util.Date(cursor.getLong(offset + 34)), // CancelDate
            cursor.isNull(offset + 35) ? null : cursor.getInt(offset + 35), // NewSend
            cursor.isNull(offset + 36) ? null : cursor.getInt(offset + 36), // CurrentAccessStaff
            cursor.isNull(offset + 37) ? null : cursor.getDouble(offset + 37), // OtherPercentDiscount
            cursor.isNull(offset + 38) ? null : cursor.getDouble(offset + 38), // OtherAmountDiscount
            cursor.isNull(offset + 39) ? null : cursor.getInt(offset + 39), // DocumentVATType
            cursor.isNull(offset + 40) ? null : cursor.getDouble(offset + 40), // VATPercent
            cursor.isNull(offset + 41) ? null : cursor.getInt(offset + 41), // LockEditDetail
            cursor.isNull(offset + 42) ? null : cursor.getInt(offset + 42), // DocumentBatchID
            cursor.isNull(offset + 43) ? null : cursor.getInt(offset + 43), // DocumentBatchShopID
            cursor.isNull(offset + 44) ? null : cursor.getInt(offset + 44), // AlreadyExportToHQ
            cursor.isNull(offset + 45) ? null : cursor.getInt(offset + 45), // AlreadyExportToBranch
            cursor.isNull(offset + 46) ? null : cursor.getInt(offset + 46) // IsUpdateDocDetail
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Document entity, int offset) {
        entity.setDocumentID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setShopID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setVendorID(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setVendorGroupID(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setVendorShopID(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setDocumentTypeID(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDocumentYear(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setDocumentMonth(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setDocumentNumber(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setDocumentDate(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setInputBy(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setUpdateBy(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setApproveBy(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setVoidBy(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setReceiveBy(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setDocumentStatus(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setInvoiceRef(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setDocumentUDDID(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setDocumentIDRef(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setDocIDRefShopID(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setInventoryID(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setToInvID(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setFromInvID(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setFromTemplateID(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setFromTemplateShopID(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setIsSmallUnit(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
        entity.setRemark(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setTermOfPayment(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
        entity.setDueDate(cursor.isNull(offset + 28) ? null : new java.util.Date(cursor.getLong(offset + 28)));
        entity.setDocumentHeader(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setCreditDay(cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30));
        entity.setInsertDate(cursor.isNull(offset + 31) ? null : new java.util.Date(cursor.getLong(offset + 31)));
        entity.setUpdateDate(cursor.isNull(offset + 32) ? null : new java.util.Date(cursor.getLong(offset + 32)));
        entity.setApproveDate(cursor.isNull(offset + 33) ? null : new java.util.Date(cursor.getLong(offset + 33)));
        entity.setCancelDate(cursor.isNull(offset + 34) ? null : new java.util.Date(cursor.getLong(offset + 34)));
        entity.setNewSend(cursor.isNull(offset + 35) ? null : cursor.getInt(offset + 35));
        entity.setCurrentAccessStaff(cursor.isNull(offset + 36) ? null : cursor.getInt(offset + 36));
        entity.setOtherPercentDiscount(cursor.isNull(offset + 37) ? null : cursor.getDouble(offset + 37));
        entity.setOtherAmountDiscount(cursor.isNull(offset + 38) ? null : cursor.getDouble(offset + 38));
        entity.setDocumentVATType(cursor.isNull(offset + 39) ? null : cursor.getInt(offset + 39));
        entity.setVATPercent(cursor.isNull(offset + 40) ? null : cursor.getDouble(offset + 40));
        entity.setLockEditDetail(cursor.isNull(offset + 41) ? null : cursor.getInt(offset + 41));
        entity.setDocumentBatchID(cursor.isNull(offset + 42) ? null : cursor.getInt(offset + 42));
        entity.setDocumentBatchShopID(cursor.isNull(offset + 43) ? null : cursor.getInt(offset + 43));
        entity.setAlreadyExportToHQ(cursor.isNull(offset + 44) ? null : cursor.getInt(offset + 44));
        entity.setAlreadyExportToBranch(cursor.isNull(offset + 45) ? null : cursor.getInt(offset + 45));
        entity.setIsUpdateDocDetail(cursor.isNull(offset + 46) ? null : cursor.getInt(offset + 46));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(Document entity, long rowId) {
        return entity.getDocumentID();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(Document entity) {
        if(entity != null) {
            return entity.getDocumentID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
