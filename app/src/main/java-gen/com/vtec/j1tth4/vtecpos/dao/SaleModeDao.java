package com.vtec.j1tth4.vtecpos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vtec.j1tth4.vtecpos.dao.SaleMode;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SaleMode.
*/
public class SaleModeDao extends AbstractDao<SaleMode, Integer> {

    public static final String TABLENAME = "SaleMode";

    /**
     * Properties of entity SaleMode.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property SaleModeID = new Property(0, Integer.class, "SaleModeID", true, "SaleModeID");
        public final static Property SaleModeName = new Property(1, String.class, "SaleModeName", false, "SaleModeName");
        public final static Property Deleted = new Property(2, Integer.class, "Deleted", false, "Deleted");
        public final static Property PositionPrefix = new Property(3, Integer.class, "PositionPrefix", false, "PositionPrefix");
        public final static Property PrefixText = new Property(4, String.class, "PrefixText", false, "PrefixText");
        public final static Property PrefixTextPrinting = new Property(5, String.class, "PrefixTextPrinting", false, "PrefixTextPrinting");
        public final static Property PrefixQueue = new Property(6, String.class, "PrefixQueue", false, "PrefixQueue");
        public final static Property ReceiptHeaderText = new Property(7, String.class, "ReceiptHeaderText", false, "ReceiptHeaderText");
        public final static Property HasServiceCharge = new Property(8, Integer.class, "HasServiceCharge", false, "HasServiceCharge");
    };


    public SaleModeDao(DaoConfig config) {
        super(config);
    }
    
    public SaleModeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SaleMode entity) {
        stmt.clearBindings();
 
        Integer SaleModeID = entity.getSaleModeID();
        if (SaleModeID != null) {
            stmt.bindLong(1, SaleModeID);
        }
 
        String SaleModeName = entity.getSaleModeName();
        if (SaleModeName != null) {
            stmt.bindString(2, SaleModeName);
        }
 
        Integer Deleted = entity.getDeleted();
        if (Deleted != null) {
            stmt.bindLong(3, Deleted);
        }
 
        Integer PositionPrefix = entity.getPositionPrefix();
        if (PositionPrefix != null) {
            stmt.bindLong(4, PositionPrefix);
        }
 
        String PrefixText = entity.getPrefixText();
        if (PrefixText != null) {
            stmt.bindString(5, PrefixText);
        }
 
        String PrefixTextPrinting = entity.getPrefixTextPrinting();
        if (PrefixTextPrinting != null) {
            stmt.bindString(6, PrefixTextPrinting);
        }
 
        String PrefixQueue = entity.getPrefixQueue();
        if (PrefixQueue != null) {
            stmt.bindString(7, PrefixQueue);
        }
 
        String ReceiptHeaderText = entity.getReceiptHeaderText();
        if (ReceiptHeaderText != null) {
            stmt.bindString(8, ReceiptHeaderText);
        }
 
        Integer HasServiceCharge = entity.getHasServiceCharge();
        if (HasServiceCharge != null) {
            stmt.bindLong(9, HasServiceCharge);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SaleMode readEntity(Cursor cursor, int offset) {
        SaleMode entity = new SaleMode( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // SaleModeID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // SaleModeName
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // Deleted
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // PositionPrefix
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // PrefixText
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // PrefixTextPrinting
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // PrefixQueue
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ReceiptHeaderText
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // HasServiceCharge
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SaleMode entity, int offset) {
        entity.setSaleModeID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setSaleModeName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeleted(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setPositionPrefix(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPrefixText(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPrefixTextPrinting(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPrefixQueue(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setReceiptHeaderText(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHasServiceCharge(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(SaleMode entity, long rowId) {
        return entity.getSaleModeID();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(SaleMode entity) {
        if(entity != null) {
            return entity.getSaleModeID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
