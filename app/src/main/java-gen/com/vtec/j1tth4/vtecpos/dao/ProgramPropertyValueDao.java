package com.vtec.j1tth4.vtecpos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vtec.j1tth4.vtecpos.dao.ProgramPropertyValue;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ProgramPropertyValue.
*/
public class ProgramPropertyValueDao extends AbstractDao<ProgramPropertyValue, Void> {

    public static final String TABLENAME = "ProgramPropertyValue";

    /**
     * Properties of entity ProgramPropertyValue.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PropertyID = new Property(0, Integer.class, "PropertyID", true, "PropertyID");
        public final static Property KeyID = new Property(1, Integer.class, "KeyID", true, "KeyID");
        public final static Property PropertyValue = new Property(2, Integer.class, "PropertyValue", false, "PropertyValue");
        public final static Property PropertyTextValue = new Property(3, String.class, "PropertyTextValue", false, "PropertyTextValue");
        public final static Property PropertyDateValue = new Property(4, java.util.Date.class, "PropertyDateValue", false, "PropertyDateValue");
        public final static Property PropertyDecimalValue = new Property(5, Double.class, "PropertyDecimalValue", false, "PropertyDecimalValue");
        public final static Property UpdateStaffID = new Property(6, Integer.class, "UpdateStaffID", false, "UpdateStaffID");
        public final static Property UpdateDate = new Property(7, java.util.Date.class, "UpdateDate", false, "UpdateDate");
    };


    public ProgramPropertyValueDao(DaoConfig config) {
        super(config);
    }
    
    public ProgramPropertyValueDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProgramPropertyValue entity) {
        stmt.clearBindings();
 
        Integer PropertyID = entity.getPropertyID();
        if (PropertyID != null) {
            stmt.bindLong(1, PropertyID);
        }
 
        Integer KeyID = entity.getKeyID();
        if (KeyID != null) {
            stmt.bindLong(2, KeyID);
        }
 
        Integer PropertyValue = entity.getPropertyValue();
        if (PropertyValue != null) {
            stmt.bindLong(3, PropertyValue);
        }
 
        String PropertyTextValue = entity.getPropertyTextValue();
        if (PropertyTextValue != null) {
            stmt.bindString(4, PropertyTextValue);
        }
 
        java.util.Date PropertyDateValue = entity.getPropertyDateValue();
        if (PropertyDateValue != null) {
            stmt.bindLong(5, PropertyDateValue.getTime());
        }
 
        Double PropertyDecimalValue = entity.getPropertyDecimalValue();
        if (PropertyDecimalValue != null) {
            stmt.bindDouble(6, PropertyDecimalValue);
        }
 
        Integer UpdateStaffID = entity.getUpdateStaffID();
        if (UpdateStaffID != null) {
            stmt.bindLong(7, UpdateStaffID);
        }
 
        java.util.Date UpdateDate = entity.getUpdateDate();
        if (UpdateDate != null) {
            stmt.bindLong(8, UpdateDate.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public ProgramPropertyValue readEntity(Cursor cursor, int offset) {
        ProgramPropertyValue entity = new ProgramPropertyValue( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // PropertyID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // KeyID
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // PropertyValue
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // PropertyTextValue
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // PropertyDateValue
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // PropertyDecimalValue
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // UpdateStaffID
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // UpdateDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProgramPropertyValue entity, int offset) {
        entity.setPropertyID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setKeyID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setPropertyValue(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setPropertyTextValue(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPropertyDateValue(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setPropertyDecimalValue(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setUpdateStaffID(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setUpdateDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(ProgramPropertyValue entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(ProgramPropertyValue entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
