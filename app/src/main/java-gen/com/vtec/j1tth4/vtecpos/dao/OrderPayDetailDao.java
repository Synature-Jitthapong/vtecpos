package com.vtec.j1tth4.vtecpos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vtec.j1tth4.vtecpos.dao.OrderPayDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ORDER_PAY_DETAIL.
*/
public class OrderPayDetailDao extends AbstractDao<OrderPayDetail, Integer> {

    public static final String TABLENAME = "ORDER_PAY_DETAIL";

    /**
     * Properties of entity OrderPayDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PayDetailID = new Property(0, int.class, "PayDetailID", true, "PAY_DETAIL_ID");
        public final static Property TransactionID = new Property(1, int.class, "TransactionID", false, "TRANSACTION_ID");
        public final static Property ComputerID = new Property(2, int.class, "ComputerID", false, "COMPUTER_ID");
        public final static Property PayTypeID = new Property(3, int.class, "PayTypeID", false, "PAY_TYPE_ID");
        public final static Property Amount = new Property(4, double.class, "Amount", false, "AMOUNT");
        public final static Property CreditCardNo = new Property(5, String.class, "CreditCardNo", false, "CREDIT_CARD_NO");
        public final static Property ExpireMonth = new Property(6, Integer.class, "ExpireMonth", false, "EXPIRE_MONTH");
        public final static Property ExpireYear = new Property(7, Integer.class, "ExpireYear", false, "EXPIRE_YEAR");
        public final static Property ChequeNumber = new Property(8, String.class, "ChequeNumber", false, "CHEQUE_NUMBER");
        public final static Property ChequeDate = new Property(9, java.util.Date.class, "ChequeDate", false, "CHEQUE_DATE");
        public final static Property BankName = new Property(10, String.class, "BankName", false, "BANK_NAME");
        public final static Property CreditCardType = new Property(11, Integer.class, "CreditCardType", false, "CREDIT_CARD_TYPE");
        public final static Property PaidByName = new Property(12, String.class, "PaidByName", false, "PAID_BY_NAME");
        public final static Property Paid = new Property(13, double.class, "Paid", false, "PAID");
        public final static Property PaymentVAT = new Property(14, double.class, "PaymentVAT", false, "PAYMENT_VAT");
        public final static Property CardID = new Property(15, Integer.class, "CardID", false, "CARD_ID");
        public final static Property CardNo = new Property(16, String.class, "CardNo", false, "CARD_NO");
        public final static Property PrepaidDiscountPercent = new Property(17, Double.class, "PrepaidDiscountPercent", false, "PREPAID_DISCOUNT_PERCENT");
        public final static Property IsFromEDC = new Property(18, Integer.class, "IsFromEDC", false, "IS_FROM_EDC");
    };


    public OrderPayDetailDao(DaoConfig config) {
        super(config);
    }
    
    public OrderPayDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OrderPayDetail entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPayDetailID());
        stmt.bindLong(2, entity.getTransactionID());
        stmt.bindLong(3, entity.getComputerID());
        stmt.bindLong(4, entity.getPayTypeID());
        stmt.bindDouble(5, entity.getAmount());
 
        String CreditCardNo = entity.getCreditCardNo();
        if (CreditCardNo != null) {
            stmt.bindString(6, CreditCardNo);
        }
 
        Integer ExpireMonth = entity.getExpireMonth();
        if (ExpireMonth != null) {
            stmt.bindLong(7, ExpireMonth);
        }
 
        Integer ExpireYear = entity.getExpireYear();
        if (ExpireYear != null) {
            stmt.bindLong(8, ExpireYear);
        }
 
        String ChequeNumber = entity.getChequeNumber();
        if (ChequeNumber != null) {
            stmt.bindString(9, ChequeNumber);
        }
 
        java.util.Date ChequeDate = entity.getChequeDate();
        if (ChequeDate != null) {
            stmt.bindLong(10, ChequeDate.getTime());
        }
 
        String BankName = entity.getBankName();
        if (BankName != null) {
            stmt.bindString(11, BankName);
        }
 
        Integer CreditCardType = entity.getCreditCardType();
        if (CreditCardType != null) {
            stmt.bindLong(12, CreditCardType);
        }
 
        String PaidByName = entity.getPaidByName();
        if (PaidByName != null) {
            stmt.bindString(13, PaidByName);
        }
        stmt.bindDouble(14, entity.getPaid());
        stmt.bindDouble(15, entity.getPaymentVAT());
 
        Integer CardID = entity.getCardID();
        if (CardID != null) {
            stmt.bindLong(16, CardID);
        }
 
        String CardNo = entity.getCardNo();
        if (CardNo != null) {
            stmt.bindString(17, CardNo);
        }
 
        Double PrepaidDiscountPercent = entity.getPrepaidDiscountPercent();
        if (PrepaidDiscountPercent != null) {
            stmt.bindDouble(18, PrepaidDiscountPercent);
        }
 
        Integer IsFromEDC = entity.getIsFromEDC();
        if (IsFromEDC != null) {
            stmt.bindLong(19, IsFromEDC);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OrderPayDetail readEntity(Cursor cursor, int offset) {
        OrderPayDetail entity = new OrderPayDetail( //
            cursor.getInt(offset + 0), // PayDetailID
            cursor.getInt(offset + 1), // TransactionID
            cursor.getInt(offset + 2), // ComputerID
            cursor.getInt(offset + 3), // PayTypeID
            cursor.getDouble(offset + 4), // Amount
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // CreditCardNo
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // ExpireMonth
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // ExpireYear
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ChequeNumber
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // ChequeDate
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // BankName
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // CreditCardType
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // PaidByName
            cursor.getDouble(offset + 13), // Paid
            cursor.getDouble(offset + 14), // PaymentVAT
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // CardID
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // CardNo
            cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17), // PrepaidDiscountPercent
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18) // IsFromEDC
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OrderPayDetail entity, int offset) {
        entity.setPayDetailID(cursor.getInt(offset + 0));
        entity.setTransactionID(cursor.getInt(offset + 1));
        entity.setComputerID(cursor.getInt(offset + 2));
        entity.setPayTypeID(cursor.getInt(offset + 3));
        entity.setAmount(cursor.getDouble(offset + 4));
        entity.setCreditCardNo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setExpireMonth(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setExpireYear(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setChequeNumber(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setChequeDate(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setBankName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCreditCardType(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setPaidByName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPaid(cursor.getDouble(offset + 13));
        entity.setPaymentVAT(cursor.getDouble(offset + 14));
        entity.setCardID(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setCardNo(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setPrepaidDiscountPercent(cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17));
        entity.setIsFromEDC(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(OrderPayDetail entity, long rowId) {
        return entity.getPayDetailID();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(OrderPayDetail entity) {
        if(entity != null) {
            return entity.getPayDetailID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
