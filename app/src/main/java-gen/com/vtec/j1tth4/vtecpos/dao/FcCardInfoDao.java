package com.vtec.j1tth4.vtecpos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vtec.j1tth4.vtecpos.dao.FcCardInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table fc_cardinfo.
*/
public class FcCardInfoDao extends AbstractDao<FcCardInfo, Integer> {

    public static final String TABLENAME = "fc_cardinfo";

    /**
     * Properties of entity FcCardInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CardID = new Property(0, Integer.class, "CardID", true, "CardID");
        public final static Property CardNo = new Property(1, String.class, "CardNo", false, "CardNo");
        public final static Property CardStatus = new Property(2, Integer.class, "CardStatus", false, "CardStatus");
        public final static Property LogID = new Property(3, Integer.class, "LogID", false, "LogID");
        public final static Property CardDepositAmount = new Property(4, Double.class, "CardDepositAmount", false, "CardDepositAmount");
        public final static Property CardCurrentAmount = new Property(5, Double.class, "CardCurrentAmount", false, "CardCurrentAmount");
        public final static Property CardLimitAmount = new Property(6, Double.class, "CardLimitAmount", false, "CardLimitAmount");
        public final static Property CreateStaffID = new Property(7, Integer.class, "CreateStaffID", false, "StaffID");
        public final static Property UpdateStaffID = new Property(8, Integer.class, "UpdateStaffID", false, "UpdateStaffID");
        public final static Property MemberID = new Property(9, Integer.class, "MemberID", false, "MemberID");
        public final static Property CreateDate = new Property(10, String.class, "CreateDate", false, "CreateDate");
        public final static Property UpdateDate = new Property(11, String.class, "UpdateDate", false, "UpdateDate");
        public final static Property ExpireDate = new Property(12, String.class, "ExpireDate", false, "ExpireDate");
        public final static Property Deleted = new Property(13, Integer.class, "Deleted", false, "Deleted");
    };


    public FcCardInfoDao(DaoConfig config) {
        super(config);
    }
    
    public FcCardInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FcCardInfo entity) {
        stmt.clearBindings();
 
        Integer CardID = entity.getCardID();
        if (CardID != null) {
            stmt.bindLong(1, CardID);
        }
 
        String CardNo = entity.getCardNo();
        if (CardNo != null) {
            stmt.bindString(2, CardNo);
        }
 
        Integer CardStatus = entity.getCardStatus();
        if (CardStatus != null) {
            stmt.bindLong(3, CardStatus);
        }
 
        Integer LogID = entity.getLogID();
        if (LogID != null) {
            stmt.bindLong(4, LogID);
        }
 
        Double CardDepositAmount = entity.getCardDepositAmount();
        if (CardDepositAmount != null) {
            stmt.bindDouble(5, CardDepositAmount);
        }
 
        Double CardCurrentAmount = entity.getCardCurrentAmount();
        if (CardCurrentAmount != null) {
            stmt.bindDouble(6, CardCurrentAmount);
        }
 
        Double CardLimitAmount = entity.getCardLimitAmount();
        if (CardLimitAmount != null) {
            stmt.bindDouble(7, CardLimitAmount);
        }
 
        Integer CreateStaffID = entity.getCreateStaffID();
        if (CreateStaffID != null) {
            stmt.bindLong(8, CreateStaffID);
        }
 
        Integer UpdateStaffID = entity.getUpdateStaffID();
        if (UpdateStaffID != null) {
            stmt.bindLong(9, UpdateStaffID);
        }
 
        Integer MemberID = entity.getMemberID();
        if (MemberID != null) {
            stmt.bindLong(10, MemberID);
        }
 
        String CreateDate = entity.getCreateDate();
        if (CreateDate != null) {
            stmt.bindString(11, CreateDate);
        }
 
        String UpdateDate = entity.getUpdateDate();
        if (UpdateDate != null) {
            stmt.bindString(12, UpdateDate);
        }
 
        String ExpireDate = entity.getExpireDate();
        if (ExpireDate != null) {
            stmt.bindString(13, ExpireDate);
        }
 
        Integer Deleted = entity.getDeleted();
        if (Deleted != null) {
            stmt.bindLong(14, Deleted);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FcCardInfo readEntity(Cursor cursor, int offset) {
        FcCardInfo entity = new FcCardInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // CardID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // CardNo
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // CardStatus
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // LogID
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // CardDepositAmount
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // CardCurrentAmount
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // CardLimitAmount
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // CreateStaffID
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // UpdateStaffID
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // MemberID
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // CreateDate
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // UpdateDate
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // ExpireDate
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13) // Deleted
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FcCardInfo entity, int offset) {
        entity.setCardID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setCardNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCardStatus(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setLogID(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCardDepositAmount(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setCardCurrentAmount(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setCardLimitAmount(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setCreateStaffID(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setUpdateStaffID(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setMemberID(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setCreateDate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUpdateDate(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setExpireDate(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDeleted(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(FcCardInfo entity, long rowId) {
        return entity.getCardID();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(FcCardInfo entity) {
        if(entity != null) {
            return entity.getCardID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
