package com.vtec.j1tth4.vtecpos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vtec.j1tth4.vtecpos.dao.ProductType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PRODUCT_TYPE.
*/
public class ProductTypeDao extends AbstractDao<ProductType, Integer> {

    public static final String TABLENAME = "PRODUCT_TYPE";

    /**
     * Properties of entity ProductType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ProductTypeID = new Property(0, int.class, "ProductTypeID", true, "PRODUCT_TYPE_ID");
        public final static Property ProductTypeName = new Property(1, String.class, "ProductTypeName", false, "PRODUCT_TYPE_NAME");
        public final static Property ComponentLevel = new Property(2, int.class, "ComponentLevel", false, "COMPONENT_LEVEL");
        public final static Property ShowInFront = new Property(3, int.class, "ShowInFront", false, "SHOW_IN_FRONT");
        public final static Property AutoAddMaterial = new Property(4, int.class, "AutoAddMaterial", false, "AUTO_ADD_MATERIAL");
        public final static Property NotInRevenue = new Property(5, int.class, "NotInRevenue", false, "NOT_IN_REVENUE");
        public final static Property WeightPriceForRevenue = new Property(6, int.class, "WeightPriceForRevenue", false, "WEIGHT_PRICE_FOR_REVENUE");
        public final static Property DisplayOrdering = new Property(7, int.class, "DisplayOrdering", false, "DISPLAY_ORDERING");
        public final static Property Deleted = new Property(8, int.class, "Deleted", false, "DELETED");
    };


    public ProductTypeDao(DaoConfig config) {
        super(config);
    }
    
    public ProductTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProductType entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getProductTypeID());
 
        String ProductTypeName = entity.getProductTypeName();
        if (ProductTypeName != null) {
            stmt.bindString(2, ProductTypeName);
        }
        stmt.bindLong(3, entity.getComponentLevel());
        stmt.bindLong(4, entity.getShowInFront());
        stmt.bindLong(5, entity.getAutoAddMaterial());
        stmt.bindLong(6, entity.getNotInRevenue());
        stmt.bindLong(7, entity.getWeightPriceForRevenue());
        stmt.bindLong(8, entity.getDisplayOrdering());
        stmt.bindLong(9, entity.getDeleted());
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ProductType readEntity(Cursor cursor, int offset) {
        ProductType entity = new ProductType( //
            cursor.getInt(offset + 0), // ProductTypeID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ProductTypeName
            cursor.getInt(offset + 2), // ComponentLevel
            cursor.getInt(offset + 3), // ShowInFront
            cursor.getInt(offset + 4), // AutoAddMaterial
            cursor.getInt(offset + 5), // NotInRevenue
            cursor.getInt(offset + 6), // WeightPriceForRevenue
            cursor.getInt(offset + 7), // DisplayOrdering
            cursor.getInt(offset + 8) // Deleted
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProductType entity, int offset) {
        entity.setProductTypeID(cursor.getInt(offset + 0));
        entity.setProductTypeName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setComponentLevel(cursor.getInt(offset + 2));
        entity.setShowInFront(cursor.getInt(offset + 3));
        entity.setAutoAddMaterial(cursor.getInt(offset + 4));
        entity.setNotInRevenue(cursor.getInt(offset + 5));
        entity.setWeightPriceForRevenue(cursor.getInt(offset + 6));
        entity.setDisplayOrdering(cursor.getInt(offset + 7));
        entity.setDeleted(cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(ProductType entity, long rowId) {
        return entity.getProductTypeID();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(ProductType entity) {
        if(entity != null) {
            return entity.getProductTypeID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
