package com.vtec.j1tth4.vtecpos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vtec.j1tth4.vtecpos.dao.ProductType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ProductType.
*/
public class ProductTypeDao extends AbstractDao<ProductType, Integer> {

    public static final String TABLENAME = "ProductType";

    /**
     * Properties of entity ProductType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ProductTypeID = new Property(0, Integer.class, "ProductTypeID", true, "ProductTypeID");
        public final static Property ProductTypeName = new Property(1, String.class, "ProductTypeName", false, "ProductTypeName");
        public final static Property ComponentLevel = new Property(2, Integer.class, "ComponentLevel", false, "ComponentLevel");
        public final static Property ShowInFront = new Property(3, Integer.class, "ShowInFront", false, "ShowInFront");
        public final static Property ShowInReceipt = new Property(4, Integer.class, "ShowInReceipt", false, "ShowInReceipt");
        public final static Property AutoAddMaterial = new Property(5, Integer.class, "AutoAddMaterial", false, "AutoAddMaterial");
        public final static Property NotInRevenue = new Property(6, Integer.class, "NotInRevenue", false, "NotInRevenue");
        public final static Property WeightPriceForRevenue = new Property(7, Integer.class, "WeightPriceForRevenue", false, "WeightPriceForRevenue");
        public final static Property IsComment = new Property(8, Integer.class, "IsComment", false, "IsComment");
        public final static Property DisplayOrdering = new Property(9, Integer.class, "DisplayOrdering", false, "DisplayOrdering");
        public final static Property Deleted = new Property(10, Integer.class, "Deleted", false, "Deleted");
    };


    public ProductTypeDao(DaoConfig config) {
        super(config);
    }
    
    public ProductTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProductType entity) {
        stmt.clearBindings();
 
        Integer ProductTypeID = entity.getProductTypeID();
        if (ProductTypeID != null) {
            stmt.bindLong(1, ProductTypeID);
        }
 
        String ProductTypeName = entity.getProductTypeName();
        if (ProductTypeName != null) {
            stmt.bindString(2, ProductTypeName);
        }
 
        Integer ComponentLevel = entity.getComponentLevel();
        if (ComponentLevel != null) {
            stmt.bindLong(3, ComponentLevel);
        }
 
        Integer ShowInFront = entity.getShowInFront();
        if (ShowInFront != null) {
            stmt.bindLong(4, ShowInFront);
        }
 
        Integer ShowInReceipt = entity.getShowInReceipt();
        if (ShowInReceipt != null) {
            stmt.bindLong(5, ShowInReceipt);
        }
 
        Integer AutoAddMaterial = entity.getAutoAddMaterial();
        if (AutoAddMaterial != null) {
            stmt.bindLong(6, AutoAddMaterial);
        }
 
        Integer NotInRevenue = entity.getNotInRevenue();
        if (NotInRevenue != null) {
            stmt.bindLong(7, NotInRevenue);
        }
 
        Integer WeightPriceForRevenue = entity.getWeightPriceForRevenue();
        if (WeightPriceForRevenue != null) {
            stmt.bindLong(8, WeightPriceForRevenue);
        }
 
        Integer IsComment = entity.getIsComment();
        if (IsComment != null) {
            stmt.bindLong(9, IsComment);
        }
 
        Integer DisplayOrdering = entity.getDisplayOrdering();
        if (DisplayOrdering != null) {
            stmt.bindLong(10, DisplayOrdering);
        }
 
        Integer Deleted = entity.getDeleted();
        if (Deleted != null) {
            stmt.bindLong(11, Deleted);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ProductType readEntity(Cursor cursor, int offset) {
        ProductType entity = new ProductType( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // ProductTypeID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ProductTypeName
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // ComponentLevel
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // ShowInFront
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // ShowInReceipt
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // AutoAddMaterial
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // NotInRevenue
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // WeightPriceForRevenue
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // IsComment
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // DisplayOrdering
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10) // Deleted
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProductType entity, int offset) {
        entity.setProductTypeID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setProductTypeName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setComponentLevel(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setShowInFront(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setShowInReceipt(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setAutoAddMaterial(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setNotInRevenue(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setWeightPriceForRevenue(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setIsComment(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setDisplayOrdering(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setDeleted(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(ProductType entity, long rowId) {
        return entity.getProductTypeID();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(ProductType entity) {
        if(entity != null) {
            return entity.getProductTypeID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
