package com.vtec.j1tth4.vtecpos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vtec.j1tth4.vtecpos.dao.OrderPrintJob;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table OrderPrintJob.
*/
public class OrderPrintJobDao extends AbstractDao<OrderPrintJob, Void> {

    public static final String TABLENAME = "OrderPrintJob";

    /**
     * Properties of entity OrderPrintJob.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TransactionID = new Property(0, Integer.class, "TransactionID", true, "TransactionID");
        public final static Property ComputerID = new Property(1, Integer.class, "ComputerID", true, "ComputerID");
        public final static Property OrderDetailID = new Property(2, Integer.class, "OrderDetailID", true, "OrderDetailID");
        public final static Property PrintNo = new Property(3, Integer.class, "PrintNo", true, "PrintNo");
        public final static Property PrinterID = new Property(4, Integer.class, "PrinterID", false, "PrinterID");
        public final static Property IsPrintSummary = new Property(5, Integer.class, "IsPrintSummary", false, "IsPrintSummary");
        public final static Property InsertDateTime = new Property(6, String.class, "InsertDateTime", false, "InsertDateTime");
        public final static Property PrintDateTime = new Property(7, String.class, "PrintDateTime", false, "PrintDateTime");
        public final static Property FinishDateTime = new Property(8, String.class, "FinishDateTime", false, "PrintDateTime");
        public final static Property SaleDate = new Property(9, String.class, "SaleDate", false, "SaleDate");
        public final static Property ShopID = new Property(10, Integer.class, "ShopID", false, "ShopID");
        public final static Property PrintFromComputerID = new Property(11, Integer.class, "PrintFromComputerID", false, "PrintFromComputerID");
        public final static Property PrintStatus = new Property(12, Integer.class, "PrintStatus", false, "PrintStatus");
    };


    public OrderPrintJobDao(DaoConfig config) {
        super(config);
    }
    
    public OrderPrintJobDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OrderPrintJob entity) {
        stmt.clearBindings();
 
        Integer TransactionID = entity.getTransactionID();
        if (TransactionID != null) {
            stmt.bindLong(1, TransactionID);
        }
 
        Integer ComputerID = entity.getComputerID();
        if (ComputerID != null) {
            stmt.bindLong(2, ComputerID);
        }
 
        Integer OrderDetailID = entity.getOrderDetailID();
        if (OrderDetailID != null) {
            stmt.bindLong(3, OrderDetailID);
        }
 
        Integer PrintNo = entity.getPrintNo();
        if (PrintNo != null) {
            stmt.bindLong(4, PrintNo);
        }
 
        Integer PrinterID = entity.getPrinterID();
        if (PrinterID != null) {
            stmt.bindLong(5, PrinterID);
        }
 
        Integer IsPrintSummary = entity.getIsPrintSummary();
        if (IsPrintSummary != null) {
            stmt.bindLong(6, IsPrintSummary);
        }
 
        String InsertDateTime = entity.getInsertDateTime();
        if (InsertDateTime != null) {
            stmt.bindString(7, InsertDateTime);
        }
 
        String PrintDateTime = entity.getPrintDateTime();
        if (PrintDateTime != null) {
            stmt.bindString(8, PrintDateTime);
        }
 
        String FinishDateTime = entity.getFinishDateTime();
        if (FinishDateTime != null) {
            stmt.bindString(9, FinishDateTime);
        }
 
        String SaleDate = entity.getSaleDate();
        if (SaleDate != null) {
            stmt.bindString(10, SaleDate);
        }
 
        Integer ShopID = entity.getShopID();
        if (ShopID != null) {
            stmt.bindLong(11, ShopID);
        }
 
        Integer PrintFromComputerID = entity.getPrintFromComputerID();
        if (PrintFromComputerID != null) {
            stmt.bindLong(12, PrintFromComputerID);
        }
 
        Integer PrintStatus = entity.getPrintStatus();
        if (PrintStatus != null) {
            stmt.bindLong(13, PrintStatus);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public OrderPrintJob readEntity(Cursor cursor, int offset) {
        OrderPrintJob entity = new OrderPrintJob( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // TransactionID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // ComputerID
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // OrderDetailID
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // PrintNo
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // PrinterID
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // IsPrintSummary
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // InsertDateTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // PrintDateTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // FinishDateTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // SaleDate
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // ShopID
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // PrintFromComputerID
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12) // PrintStatus
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OrderPrintJob entity, int offset) {
        entity.setTransactionID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setComputerID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setOrderDetailID(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setPrintNo(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPrinterID(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setIsPrintSummary(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setInsertDateTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPrintDateTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFinishDateTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSaleDate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setShopID(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setPrintFromComputerID(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setPrintStatus(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(OrderPrintJob entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(OrderPrintJob entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
