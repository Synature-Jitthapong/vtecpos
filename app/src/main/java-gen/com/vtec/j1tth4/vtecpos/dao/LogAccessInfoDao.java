package com.vtec.j1tth4.vtecpos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vtec.j1tth4.vtecpos.dao.LogAccessInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LogAccessInfo.
*/
public class LogAccessInfoDao extends AbstractDao<LogAccessInfo, Integer> {

    public static final String TABLENAME = "LogAccessInfo";

    /**
     * Properties of entity LogAccessInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property AccessID = new Property(0, Integer.class, "AccessID", true, "AccessID");
        public final static Property AccessName = new Property(1, String.class, "AccessName", false, "AccessName");
        public final static Property Deleted = new Property(2, Integer.class, "Deleted", false, "Deleted");
    };


    public LogAccessInfoDao(DaoConfig config) {
        super(config);
    }
    
    public LogAccessInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LogAccessInfo entity) {
        stmt.clearBindings();
 
        Integer AccessID = entity.getAccessID();
        if (AccessID != null) {
            stmt.bindLong(1, AccessID);
        }
 
        String AccessName = entity.getAccessName();
        if (AccessName != null) {
            stmt.bindString(2, AccessName);
        }
 
        Integer Deleted = entity.getDeleted();
        if (Deleted != null) {
            stmt.bindLong(3, Deleted);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LogAccessInfo readEntity(Cursor cursor, int offset) {
        LogAccessInfo entity = new LogAccessInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // AccessID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // AccessName
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2) // Deleted
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LogAccessInfo entity, int offset) {
        entity.setAccessID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setAccessName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeleted(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(LogAccessInfo entity, long rowId) {
        return entity.getAccessID();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(LogAccessInfo entity) {
        if(entity != null) {
            return entity.getAccessID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
