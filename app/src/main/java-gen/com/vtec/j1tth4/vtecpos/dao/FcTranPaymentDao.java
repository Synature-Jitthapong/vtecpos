package com.vtec.j1tth4.vtecpos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vtec.j1tth4.vtecpos.dao.FcTranPayment;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table fc_tranpayment.
*/
public class FcTranPaymentDao extends AbstractDao<FcTranPayment, Void> {

    public static final String TABLENAME = "fc_tranpayment";

    /**
     * Properties of entity FcTranPayment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PayDetailID = new Property(0, Integer.class, "PayDetailID", true, "PayDetailID");
        public final static Property TransactionID = new Property(1, Integer.class, "TransactionID", true, "TransactionID");
        public final static Property ComputerID = new Property(2, Integer.class, "ComputerID", true, "ComputerID");
        public final static Property PayTypeID = new Property(3, Integer.class, "PayTypeID", false, "PayTypeID");
        public final static Property ShopID = new Property(4, Integer.class, "ShopID", false, "ShopID");
        public final static Property SaleDate = new Property(5, String.class, "SaleDate", false, "SaleDate");
        public final static Property PayAmount = new Property(6, Double.class, "PayAmount", false, "PayAmount");
        public final static Property CCNumber = new Property(7, String.class, "CCNumber", false, "CCNumber");
        public final static Property CCExpMonth = new Property(8, Integer.class, "CCExpMonth", false, "CCExpMonth");
        public final static Property CCExpYear = new Property(9, Integer.class, "CCExpYear", false, "CCExpYear");
        public final static Property CCType = new Property(10, Integer.class, "CCType", false, "CCType");
        public final static Property CCBank = new Property(11, Integer.class, "CCBank", false, "CCBank");
        public final static Property CCName = new Property(12, String.class, "CCName", false, "CCName");
        public final static Property CCApproveCode = new Property(13, String.class, "CCApproveCode", false, "CCApproveCode");
        public final static Property CCResponse = new Property(14, String.class, "CCResponse", false, "CCResponse");
        public final static Property Remark = new Property(15, String.class, "Remark", false, "Remark");
        public final static Property InsertDate = new Property(16, String.class, "InsertDate", false, "InsertDate");
    };


    public FcTranPaymentDao(DaoConfig config) {
        super(config);
    }
    
    public FcTranPaymentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FcTranPayment entity) {
        stmt.clearBindings();
 
        Integer PayDetailID = entity.getPayDetailID();
        if (PayDetailID != null) {
            stmt.bindLong(1, PayDetailID);
        }
 
        Integer TransactionID = entity.getTransactionID();
        if (TransactionID != null) {
            stmt.bindLong(2, TransactionID);
        }
 
        Integer ComputerID = entity.getComputerID();
        if (ComputerID != null) {
            stmt.bindLong(3, ComputerID);
        }
 
        Integer PayTypeID = entity.getPayTypeID();
        if (PayTypeID != null) {
            stmt.bindLong(4, PayTypeID);
        }
 
        Integer ShopID = entity.getShopID();
        if (ShopID != null) {
            stmt.bindLong(5, ShopID);
        }
 
        String SaleDate = entity.getSaleDate();
        if (SaleDate != null) {
            stmt.bindString(6, SaleDate);
        }
 
        Double PayAmount = entity.getPayAmount();
        if (PayAmount != null) {
            stmt.bindDouble(7, PayAmount);
        }
 
        String CCNumber = entity.getCCNumber();
        if (CCNumber != null) {
            stmt.bindString(8, CCNumber);
        }
 
        Integer CCExpMonth = entity.getCCExpMonth();
        if (CCExpMonth != null) {
            stmt.bindLong(9, CCExpMonth);
        }
 
        Integer CCExpYear = entity.getCCExpYear();
        if (CCExpYear != null) {
            stmt.bindLong(10, CCExpYear);
        }
 
        Integer CCType = entity.getCCType();
        if (CCType != null) {
            stmt.bindLong(11, CCType);
        }
 
        Integer CCBank = entity.getCCBank();
        if (CCBank != null) {
            stmt.bindLong(12, CCBank);
        }
 
        String CCName = entity.getCCName();
        if (CCName != null) {
            stmt.bindString(13, CCName);
        }
 
        String CCApproveCode = entity.getCCApproveCode();
        if (CCApproveCode != null) {
            stmt.bindString(14, CCApproveCode);
        }
 
        String CCResponse = entity.getCCResponse();
        if (CCResponse != null) {
            stmt.bindString(15, CCResponse);
        }
 
        String Remark = entity.getRemark();
        if (Remark != null) {
            stmt.bindString(16, Remark);
        }
 
        String InsertDate = entity.getInsertDate();
        if (InsertDate != null) {
            stmt.bindString(17, InsertDate);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public FcTranPayment readEntity(Cursor cursor, int offset) {
        FcTranPayment entity = new FcTranPayment( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // PayDetailID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // TransactionID
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // ComputerID
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // PayTypeID
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // ShopID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // SaleDate
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // PayAmount
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // CCNumber
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // CCExpMonth
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // CCExpYear
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // CCType
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // CCBank
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // CCName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // CCApproveCode
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // CCResponse
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // Remark
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // InsertDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FcTranPayment entity, int offset) {
        entity.setPayDetailID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setTransactionID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setComputerID(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setPayTypeID(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setShopID(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setSaleDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPayAmount(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setCCNumber(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCCExpMonth(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setCCExpYear(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setCCType(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setCCBank(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setCCName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCCApproveCode(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCCResponse(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setRemark(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setInsertDate(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(FcTranPayment entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(FcTranPayment entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
