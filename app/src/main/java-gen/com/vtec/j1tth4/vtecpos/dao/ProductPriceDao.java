package com.vtec.j1tth4.vtecpos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vtec.j1tth4.vtecpos.dao.ProductPrice;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ProductPrice.
*/
public class ProductPriceDao extends AbstractDao<ProductPrice, Integer> {

    public static final String TABLENAME = "ProductPrice";

    /**
     * Properties of entity ProductPrice.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ProductPriceID = new Property(0, Integer.class, "ProductPriceID", true, "ProductPriceID");
        public final static Property ProductID = new Property(1, Integer.class, "ProductID", false, "ProductID");
        public final static Property ProductPrice = new Property(2, Double.class, "ProductPrice", false, "ProductPrice");
        public final static Property PrepaidPrice = new Property(3, Double.class, "PrepaidPrice", false, "PrepaidPrice");
        public final static Property MainPrice = new Property(4, Double.class, "MainPrice", false, "MainPrice");
        public final static Property SaleMode = new Property(5, Integer.class, "SaleMode", false, "SaleMode");
        public final static Property PriceRemark = new Property(6, String.class, "PriceRemark", false, "PriceRemark");
        public final static Property FromDate = new Property(7, String.class, "FromDate", false, "FromDate");
        public final static Property ToDate = new Property(8, String.class, "ToDate", false, "ToDate");
        public final static Property AddingFromBranch = new Property(9, Integer.class, "AddingFromBranch", false, "AddingFromBranch");
    };


    public ProductPriceDao(DaoConfig config) {
        super(config);
    }
    
    public ProductPriceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProductPrice entity) {
        stmt.clearBindings();
 
        Integer ProductPriceID = entity.getProductPriceID();
        if (ProductPriceID != null) {
            stmt.bindLong(1, ProductPriceID);
        }
 
        Integer ProductID = entity.getProductID();
        if (ProductID != null) {
            stmt.bindLong(2, ProductID);
        }
 
        Double ProductPrice = entity.getProductPrice();
        if (ProductPrice != null) {
            stmt.bindDouble(3, ProductPrice);
        }
 
        Double PrepaidPrice = entity.getPrepaidPrice();
        if (PrepaidPrice != null) {
            stmt.bindDouble(4, PrepaidPrice);
        }
 
        Double MainPrice = entity.getMainPrice();
        if (MainPrice != null) {
            stmt.bindDouble(5, MainPrice);
        }
 
        Integer SaleMode = entity.getSaleMode();
        if (SaleMode != null) {
            stmt.bindLong(6, SaleMode);
        }
 
        String PriceRemark = entity.getPriceRemark();
        if (PriceRemark != null) {
            stmt.bindString(7, PriceRemark);
        }
 
        String FromDate = entity.getFromDate();
        if (FromDate != null) {
            stmt.bindString(8, FromDate);
        }
 
        String ToDate = entity.getToDate();
        if (ToDate != null) {
            stmt.bindString(9, ToDate);
        }
 
        Integer AddingFromBranch = entity.getAddingFromBranch();
        if (AddingFromBranch != null) {
            stmt.bindLong(10, AddingFromBranch);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ProductPrice readEntity(Cursor cursor, int offset) {
        ProductPrice entity = new ProductPrice( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // ProductPriceID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // ProductID
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // ProductPrice
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // PrepaidPrice
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // MainPrice
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // SaleMode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // PriceRemark
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // FromDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ToDate
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // AddingFromBranch
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProductPrice entity, int offset) {
        entity.setProductPriceID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setProductID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setProductPrice(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setPrepaidPrice(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setMainPrice(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setSaleMode(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setPriceRemark(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFromDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setToDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAddingFromBranch(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(ProductPrice entity, long rowId) {
        return entity.getProductPriceID();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(ProductPrice entity) {
        if(entity != null) {
            return entity.getProductPriceID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
