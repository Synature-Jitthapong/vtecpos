package com.vtec.j1tth4.vtecpos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vtec.j1tth4.vtecpos.dao.ProductPrice;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PRODUCT_PRICE.
*/
public class ProductPriceDao extends AbstractDao<ProductPrice, Integer> {

    public static final String TABLENAME = "PRODUCT_PRICE";

    /**
     * Properties of entity ProductPrice.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ProductPriceID = new Property(0, int.class, "ProductPriceID", true, "PRODUCT_PRICE_ID");
        public final static Property ProductID = new Property(1, int.class, "ProductID", false, "PRODUCT_ID");
        public final static Property ProductPrice = new Property(2, Double.class, "ProductPrice", false, "PRODUCT_PRICE");
        public final static Property PrepaidPrice = new Property(3, double.class, "PrepaidPrice", false, "PREPAID_PRICE");
        public final static Property MainPrice = new Property(4, double.class, "MainPrice", false, "MAIN_PRICE");
        public final static Property SaleMode = new Property(5, int.class, "SaleMode", false, "SALE_MODE");
        public final static Property PriceRemark = new Property(6, String.class, "PriceRemark", false, "PRICE_REMARK");
        public final static Property FromDate = new Property(7, java.util.Date.class, "FromDate", false, "FROM_DATE");
        public final static Property ToDate = new Property(8, java.util.Date.class, "ToDate", false, "TO_DATE");
        public final static Property AddingFromBranch = new Property(9, int.class, "AddingFromBranch", false, "ADDING_FROM_BRANCH");
    };


    public ProductPriceDao(DaoConfig config) {
        super(config);
    }
    
    public ProductPriceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PRODUCT_PRICE' (" + //
                "'PRODUCT_PRICE_ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: ProductPriceID
                "'PRODUCT_ID' INTEGER NOT NULL ," + // 1: ProductID
                "'PRODUCT_PRICE' REAL," + // 2: ProductPrice
                "'PREPAID_PRICE' REAL NOT NULL ," + // 3: PrepaidPrice
                "'MAIN_PRICE' REAL NOT NULL ," + // 4: MainPrice
                "'SALE_MODE' INTEGER NOT NULL ," + // 5: SaleMode
                "'PRICE_REMARK' TEXT," + // 6: PriceRemark
                "'FROM_DATE' INTEGER NOT NULL ," + // 7: FromDate
                "'TO_DATE' INTEGER NOT NULL ," + // 8: ToDate
                "'ADDING_FROM_BRANCH' INTEGER NOT NULL );"); // 9: AddingFromBranch
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PRODUCT_PRICE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProductPrice entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getProductPriceID());
        stmt.bindLong(2, entity.getProductID());
 
        Double ProductPrice = entity.getProductPrice();
        if (ProductPrice != null) {
            stmt.bindDouble(3, ProductPrice);
        }
        stmt.bindDouble(4, entity.getPrepaidPrice());
        stmt.bindDouble(5, entity.getMainPrice());
        stmt.bindLong(6, entity.getSaleMode());
 
        String PriceRemark = entity.getPriceRemark();
        if (PriceRemark != null) {
            stmt.bindString(7, PriceRemark);
        }
        stmt.bindLong(8, entity.getFromDate().getTime());
        stmt.bindLong(9, entity.getToDate().getTime());
        stmt.bindLong(10, entity.getAddingFromBranch());
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ProductPrice readEntity(Cursor cursor, int offset) {
        ProductPrice entity = new ProductPrice( //
            cursor.getInt(offset + 0), // ProductPriceID
            cursor.getInt(offset + 1), // ProductID
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // ProductPrice
            cursor.getDouble(offset + 3), // PrepaidPrice
            cursor.getDouble(offset + 4), // MainPrice
            cursor.getInt(offset + 5), // SaleMode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // PriceRemark
            new java.util.Date(cursor.getLong(offset + 7)), // FromDate
            new java.util.Date(cursor.getLong(offset + 8)), // ToDate
            cursor.getInt(offset + 9) // AddingFromBranch
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProductPrice entity, int offset) {
        entity.setProductPriceID(cursor.getInt(offset + 0));
        entity.setProductID(cursor.getInt(offset + 1));
        entity.setProductPrice(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setPrepaidPrice(cursor.getDouble(offset + 3));
        entity.setMainPrice(cursor.getDouble(offset + 4));
        entity.setSaleMode(cursor.getInt(offset + 5));
        entity.setPriceRemark(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFromDate(new java.util.Date(cursor.getLong(offset + 7)));
        entity.setToDate(new java.util.Date(cursor.getLong(offset + 8)));
        entity.setAddingFromBranch(cursor.getInt(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(ProductPrice entity, long rowId) {
        return entity.getProductPriceID();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(ProductPrice entity) {
        if(entity != null) {
            return entity.getProductPriceID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
