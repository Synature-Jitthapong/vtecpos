package com.vtec.j1tth4.vtecpos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vtec.j1tth4.vtecpos.dao.DocumentType;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DocumentType.
*/
public class DocumentTypeDao extends AbstractDao<DocumentType, Integer> {

    public static final String TABLENAME = "DocumentType";

    /**
     * Properties of entity DocumentType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property DocumentTypeID = new Property(0, Integer.class, "DocumentTypeID", true, "DocumentTypeID");
        public final static Property ShopID = new Property(1, Integer.class, "ShopID", false, "ShopID");
        public final static Property ComputerID = new Property(2, Integer.class, "ComputerID", false, "ComputerID");
        public final static Property DocumentStoreCode = new Property(3, Integer.class, "DocumentStoreCode", false, "DocumentStoreCode");
        public final static Property DocumentTypeHeader = new Property(4, String.class, "DocumentTypeHeader", false, "DocumentTypeHeader");
        public final static Property DocumentTypeName = new Property(5, String.class, "DocumentTypeName", false, "DocumentTypeName");
        public final static Property DocumentTypeNameLang1 = new Property(6, String.class, "DocumentTypeNameLang1", false, "DocumentTypeNameLang1");
        public final static Property DocumentTypeNameLang2 = new Property(7, String.class, "DocumentTypeNameLang2", false, "DocumentTypeNameLang2");
        public final static Property DocumentTypeNameLang3 = new Property(8, String.class, "DocumentTypeNameLang3", false, "DocumentTypeNameLang3");
        public final static Property DocumentTypeNameLang4 = new Property(9, String.class, "DocumentTypeNameLang4", false, "DocumentTypeNameLang4");
        public final static Property DocumentTypeNameLang5 = new Property(10, String.class, "DocumentTypeNameLang5", false, "DocumentTypeNameLang5");
        public final static Property ShowOnSearch = new Property(11, Integer.class, "ShowOnSearch", false, "ShowOnSearch");
        public final static Property MovementInStock = new Property(12, Integer.class, "MovementInStock", false, "MovementInStock");
        public final static Property IsAddReduceDoc = new Property(13, Integer.class, "IsAddReduceDoc", false, "IsAddReduceDoc");
        public final static Property CalculateInProfitLoss = new Property(14, Integer.class, "CalculateInProfitLoss", false, "CalculateInProfitLoss");
        public final static Property CalculateNetUse = new Property(15, Integer.class, "CalculateNetUse", false, "CalculateNetUse");
        public final static Property CalculateStandardProfitLoss = new Property(16, Integer.class, "CalculateStandardProfitLoss", false, "CalculateStandardProfitLoss");
        public final static Property Deleted = new Property(17, Integer.class, "Deleted", false, "DELETED");
    };


    public DocumentTypeDao(DaoConfig config) {
        super(config);
    }
    
    public DocumentTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DocumentType entity) {
        stmt.clearBindings();
 
        Integer DocumentTypeID = entity.getDocumentTypeID();
        if (DocumentTypeID != null) {
            stmt.bindLong(1, DocumentTypeID);
        }
 
        Integer ShopID = entity.getShopID();
        if (ShopID != null) {
            stmt.bindLong(2, ShopID);
        }
 
        Integer ComputerID = entity.getComputerID();
        if (ComputerID != null) {
            stmt.bindLong(3, ComputerID);
        }
 
        Integer DocumentStoreCode = entity.getDocumentStoreCode();
        if (DocumentStoreCode != null) {
            stmt.bindLong(4, DocumentStoreCode);
        }
 
        String DocumentTypeHeader = entity.getDocumentTypeHeader();
        if (DocumentTypeHeader != null) {
            stmt.bindString(5, DocumentTypeHeader);
        }
 
        String DocumentTypeName = entity.getDocumentTypeName();
        if (DocumentTypeName != null) {
            stmt.bindString(6, DocumentTypeName);
        }
 
        String DocumentTypeNameLang1 = entity.getDocumentTypeNameLang1();
        if (DocumentTypeNameLang1 != null) {
            stmt.bindString(7, DocumentTypeNameLang1);
        }
 
        String DocumentTypeNameLang2 = entity.getDocumentTypeNameLang2();
        if (DocumentTypeNameLang2 != null) {
            stmt.bindString(8, DocumentTypeNameLang2);
        }
 
        String DocumentTypeNameLang3 = entity.getDocumentTypeNameLang3();
        if (DocumentTypeNameLang3 != null) {
            stmt.bindString(9, DocumentTypeNameLang3);
        }
 
        String DocumentTypeNameLang4 = entity.getDocumentTypeNameLang4();
        if (DocumentTypeNameLang4 != null) {
            stmt.bindString(10, DocumentTypeNameLang4);
        }
 
        String DocumentTypeNameLang5 = entity.getDocumentTypeNameLang5();
        if (DocumentTypeNameLang5 != null) {
            stmt.bindString(11, DocumentTypeNameLang5);
        }
 
        Integer ShowOnSearch = entity.getShowOnSearch();
        if (ShowOnSearch != null) {
            stmt.bindLong(12, ShowOnSearch);
        }
 
        Integer MovementInStock = entity.getMovementInStock();
        if (MovementInStock != null) {
            stmt.bindLong(13, MovementInStock);
        }
 
        Integer IsAddReduceDoc = entity.getIsAddReduceDoc();
        if (IsAddReduceDoc != null) {
            stmt.bindLong(14, IsAddReduceDoc);
        }
 
        Integer CalculateInProfitLoss = entity.getCalculateInProfitLoss();
        if (CalculateInProfitLoss != null) {
            stmt.bindLong(15, CalculateInProfitLoss);
        }
 
        Integer CalculateNetUse = entity.getCalculateNetUse();
        if (CalculateNetUse != null) {
            stmt.bindLong(16, CalculateNetUse);
        }
 
        Integer CalculateStandardProfitLoss = entity.getCalculateStandardProfitLoss();
        if (CalculateStandardProfitLoss != null) {
            stmt.bindLong(17, CalculateStandardProfitLoss);
        }
 
        Integer Deleted = entity.getDeleted();
        if (Deleted != null) {
            stmt.bindLong(18, Deleted);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DocumentType readEntity(Cursor cursor, int offset) {
        DocumentType entity = new DocumentType( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // DocumentTypeID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // ShopID
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // ComputerID
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // DocumentStoreCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // DocumentTypeHeader
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // DocumentTypeName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // DocumentTypeNameLang1
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // DocumentTypeNameLang2
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // DocumentTypeNameLang3
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // DocumentTypeNameLang4
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // DocumentTypeNameLang5
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // ShowOnSearch
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // MovementInStock
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // IsAddReduceDoc
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // CalculateInProfitLoss
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // CalculateNetUse
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // CalculateStandardProfitLoss
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17) // Deleted
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DocumentType entity, int offset) {
        entity.setDocumentTypeID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setShopID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setComputerID(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDocumentStoreCode(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDocumentTypeHeader(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDocumentTypeName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDocumentTypeNameLang1(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDocumentTypeNameLang2(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDocumentTypeNameLang3(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDocumentTypeNameLang4(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDocumentTypeNameLang5(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setShowOnSearch(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setMovementInStock(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setIsAddReduceDoc(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setCalculateInProfitLoss(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setCalculateNetUse(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setCalculateStandardProfitLoss(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setDeleted(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(DocumentType entity, long rowId) {
        return entity.getDocumentTypeID();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(DocumentType entity) {
        if(entity != null) {
            return entity.getDocumentTypeID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
