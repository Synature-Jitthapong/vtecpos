package com.vtec.j1tth4.vtecpos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vtec.j1tth4.vtecpos.dao.ShopData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SHOP_DATA.
*/
public class ShopDataDao extends AbstractDao<ShopData, Integer> {

    public static final String TABLENAME = "SHOP_DATA";

    /**
     * Properties of entity ShopData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ShopID = new Property(0, int.class, "ShopID", true, "SHOP_ID");
        public final static Property ShopCode = new Property(1, String.class, "ShopCode", false, "SHOP_CODE");
        public final static Property ShopName = new Property(2, String.class, "ShopName", false, "SHOP_NAME");
        public final static Property IsShop = new Property(3, int.class, "IsShop", false, "IS_SHOP");
        public final static Property IsInv = new Property(4, int.class, "IsInv", false, "IS_INV");
        public final static Property MasterShop = new Property(5, int.class, "MasterShop", false, "MASTER_SHOP");
        public final static Property MasterShopLink = new Property(6, int.class, "MasterShopLink", false, "MASTER_SHOP_LINK");
        public final static Property ShowInReport = new Property(7, int.class, "ShowInReport", false, "SHOW_IN_REPORT");
        public final static Property ShopTypeID = new Property(8, int.class, "ShopTypeID", false, "SHOP_TYPE_ID");
        public final static Property ShopCatID1 = new Property(9, int.class, "ShopCatID1", false, "SHOP_CAT_ID1");
        public final static Property ShopCatID2 = new Property(10, int.class, "ShopCatID2", false, "SHOP_CAT_ID2");
        public final static Property ShopCatID3 = new Property(11, int.class, "ShopCatID3", false, "SHOP_CAT_ID3");
        public final static Property ShopCatID4 = new Property(12, int.class, "ShopCatID4", false, "SHOP_CAT_ID4");
        public final static Property ShopCatID5 = new Property(13, int.class, "ShopCatID5", false, "SHOP_CAT_ID5");
        public final static Property ShopCatID6 = new Property(14, int.class, "ShopCatID6", false, "SHOP_CAT_ID6");
        public final static Property ShopCatID7 = new Property(15, int.class, "ShopCatID7", false, "SHOP_CAT_ID7");
        public final static Property ShopCatID8 = new Property(16, int.class, "ShopCatID8", false, "SHOP_CAT_ID8");
        public final static Property ShopCatID9 = new Property(17, int.class, "ShopCatID9", false, "SHOP_CAT_ID9");
        public final static Property ShopCatID10 = new Property(18, int.class, "ShopCatID10", false, "SHOP_CAT_ID10");
        public final static Property OpenHour = new Property(19, java.util.Date.class, "OpenHour", false, "OPEN_HOUR");
        public final static Property CloseHour = new Property(20, java.util.Date.class, "CloseHour", false, "CLOSE_HOUR");
        public final static Property CompanyName = new Property(21, String.class, "CompanyName", false, "COMPANY_NAME");
        public final static Property CompanyAddress1 = new Property(22, String.class, "CompanyAddress1", false, "COMPANY_ADDRESS1");
        public final static Property CompanyAddress2 = new Property(23, String.class, "CompanyAddress2", false, "COMPANY_ADDRESS2");
        public final static Property CompanyCity = new Property(24, String.class, "CompanyCity", false, "COMPANY_CITY");
        public final static Property CompanyProvince = new Property(25, Integer.class, "CompanyProvince", false, "COMPANY_PROVINCE");
        public final static Property DisplayCompanyProvinceLangID = new Property(26, Integer.class, "DisplayCompanyProvinceLangID", false, "DISPLAY_COMPANY_PROVINCE_LANG_ID");
        public final static Property CompanyZipCode = new Property(27, String.class, "CompanyZipCode", false, "COMPANY_ZIP_CODE");
        public final static Property CompanyTelephone = new Property(28, String.class, "CompanyTelephone", false, "COMPANY_TELEPHONE");
        public final static Property CompanyFax = new Property(29, String.class, "CompanyFax", false, "COMPANY_FAX");
        public final static Property CompanyCountry = new Property(30, String.class, "CompanyCountry", false, "COMPANY_COUNTRY");
        public final static Property CompanyTaxID = new Property(31, String.class, "CompanyTaxID", false, "COMPANY_TAX_ID");
        public final static Property CompanyRegisterID = new Property(32, String.class, "CompanyRegisterID", false, "COMPANY_REGISTER_ID");
        public final static Property AccountingCode = new Property(33, String.class, "AccountingCode", false, "ACCOUNTING_CODE");
        public final static Property CompanyVAT = new Property(34, Double.class, "CompanyVAT", false, "COMPANY_VAT");
        public final static Property DeliveryName = new Property(35, String.class, "DeliveryName", false, "DELIVERY_NAME");
        public final static Property DeliveryAddress1 = new Property(36, String.class, "DeliveryAddress1", false, "DELIVERY_ADDRESS1");
        public final static Property DeliveryAddress2 = new Property(37, String.class, "DeliveryAddress2", false, "DELIVERY_ADDRESS2");
        public final static Property DeliveryCity = new Property(38, String.class, "DeliveryCity", false, "DELIVERY_CITY");
        public final static Property DeliveryProvince = new Property(39, Integer.class, "DeliveryProvince", false, "DELIVERY_PROVINCE");
        public final static Property DeliveryZipCode = new Property(40, String.class, "DeliveryZipCode", false, "DELIVERY_ZIP_CODE");
        public final static Property DeliveryTelephone = new Property(41, String.class, "DeliveryTelephone", false, "DELIVERY_TELEPHONE");
        public final static Property DeliveryFax = new Property(42, String.class, "DeliveryFax", false, "DELIVERY_FAX");
        public final static Property IPAddress = new Property(43, String.class, "IPAddress", false, "IPADDRESS");
        public final static Property Addtional = new Property(44, String.class, "Addtional", false, "ADDTIONAL");
        public final static Property ProductLevelOrder = new Property(45, Integer.class, "ProductLevelOrder", false, "PRODUCT_LEVEL_ORDER");
        public final static Property Deleted = new Property(46, Integer.class, "Deleted", false, "DELETED");
    };


    public ShopDataDao(DaoConfig config) {
        super(config);
    }
    
    public ShopDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SHOP_DATA' (" + //
                "'SHOP_ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: ShopID
                "'SHOP_CODE' TEXT," + // 1: ShopCode
                "'SHOP_NAME' TEXT," + // 2: ShopName
                "'IS_SHOP' INTEGER NOT NULL ," + // 3: IsShop
                "'IS_INV' INTEGER NOT NULL ," + // 4: IsInv
                "'MASTER_SHOP' INTEGER NOT NULL ," + // 5: MasterShop
                "'MASTER_SHOP_LINK' INTEGER NOT NULL ," + // 6: MasterShopLink
                "'SHOW_IN_REPORT' INTEGER NOT NULL ," + // 7: ShowInReport
                "'SHOP_TYPE_ID' INTEGER NOT NULL ," + // 8: ShopTypeID
                "'SHOP_CAT_ID1' INTEGER NOT NULL ," + // 9: ShopCatID1
                "'SHOP_CAT_ID2' INTEGER NOT NULL ," + // 10: ShopCatID2
                "'SHOP_CAT_ID3' INTEGER NOT NULL ," + // 11: ShopCatID3
                "'SHOP_CAT_ID4' INTEGER NOT NULL ," + // 12: ShopCatID4
                "'SHOP_CAT_ID5' INTEGER NOT NULL ," + // 13: ShopCatID5
                "'SHOP_CAT_ID6' INTEGER NOT NULL ," + // 14: ShopCatID6
                "'SHOP_CAT_ID7' INTEGER NOT NULL ," + // 15: ShopCatID7
                "'SHOP_CAT_ID8' INTEGER NOT NULL ," + // 16: ShopCatID8
                "'SHOP_CAT_ID9' INTEGER NOT NULL ," + // 17: ShopCatID9
                "'SHOP_CAT_ID10' INTEGER NOT NULL ," + // 18: ShopCatID10
                "'OPEN_HOUR' INTEGER," + // 19: OpenHour
                "'CLOSE_HOUR' INTEGER," + // 20: CloseHour
                "'COMPANY_NAME' TEXT," + // 21: CompanyName
                "'COMPANY_ADDRESS1' TEXT," + // 22: CompanyAddress1
                "'COMPANY_ADDRESS2' TEXT," + // 23: CompanyAddress2
                "'COMPANY_CITY' TEXT," + // 24: CompanyCity
                "'COMPANY_PROVINCE' INTEGER," + // 25: CompanyProvince
                "'DISPLAY_COMPANY_PROVINCE_LANG_ID' INTEGER," + // 26: DisplayCompanyProvinceLangID
                "'COMPANY_ZIP_CODE' TEXT," + // 27: CompanyZipCode
                "'COMPANY_TELEPHONE' TEXT," + // 28: CompanyTelephone
                "'COMPANY_FAX' TEXT," + // 29: CompanyFax
                "'COMPANY_COUNTRY' TEXT," + // 30: CompanyCountry
                "'COMPANY_TAX_ID' TEXT," + // 31: CompanyTaxID
                "'COMPANY_REGISTER_ID' TEXT," + // 32: CompanyRegisterID
                "'ACCOUNTING_CODE' TEXT," + // 33: AccountingCode
                "'COMPANY_VAT' REAL," + // 34: CompanyVAT
                "'DELIVERY_NAME' TEXT," + // 35: DeliveryName
                "'DELIVERY_ADDRESS1' TEXT," + // 36: DeliveryAddress1
                "'DELIVERY_ADDRESS2' TEXT," + // 37: DeliveryAddress2
                "'DELIVERY_CITY' TEXT," + // 38: DeliveryCity
                "'DELIVERY_PROVINCE' INTEGER," + // 39: DeliveryProvince
                "'DELIVERY_ZIP_CODE' TEXT," + // 40: DeliveryZipCode
                "'DELIVERY_TELEPHONE' TEXT," + // 41: DeliveryTelephone
                "'DELIVERY_FAX' TEXT," + // 42: DeliveryFax
                "'IPADDRESS' TEXT," + // 43: IPAddress
                "'ADDTIONAL' TEXT," + // 44: Addtional
                "'PRODUCT_LEVEL_ORDER' INTEGER," + // 45: ProductLevelOrder
                "'DELETED' INTEGER);"); // 46: Deleted
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SHOP_DATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ShopData entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getShopID());
 
        String ShopCode = entity.getShopCode();
        if (ShopCode != null) {
            stmt.bindString(2, ShopCode);
        }
 
        String ShopName = entity.getShopName();
        if (ShopName != null) {
            stmt.bindString(3, ShopName);
        }
        stmt.bindLong(4, entity.getIsShop());
        stmt.bindLong(5, entity.getIsInv());
        stmt.bindLong(6, entity.getMasterShop());
        stmt.bindLong(7, entity.getMasterShopLink());
        stmt.bindLong(8, entity.getShowInReport());
        stmt.bindLong(9, entity.getShopTypeID());
        stmt.bindLong(10, entity.getShopCatID1());
        stmt.bindLong(11, entity.getShopCatID2());
        stmt.bindLong(12, entity.getShopCatID3());
        stmt.bindLong(13, entity.getShopCatID4());
        stmt.bindLong(14, entity.getShopCatID5());
        stmt.bindLong(15, entity.getShopCatID6());
        stmt.bindLong(16, entity.getShopCatID7());
        stmt.bindLong(17, entity.getShopCatID8());
        stmt.bindLong(18, entity.getShopCatID9());
        stmt.bindLong(19, entity.getShopCatID10());
 
        java.util.Date OpenHour = entity.getOpenHour();
        if (OpenHour != null) {
            stmt.bindLong(20, OpenHour.getTime());
        }
 
        java.util.Date CloseHour = entity.getCloseHour();
        if (CloseHour != null) {
            stmt.bindLong(21, CloseHour.getTime());
        }
 
        String CompanyName = entity.getCompanyName();
        if (CompanyName != null) {
            stmt.bindString(22, CompanyName);
        }
 
        String CompanyAddress1 = entity.getCompanyAddress1();
        if (CompanyAddress1 != null) {
            stmt.bindString(23, CompanyAddress1);
        }
 
        String CompanyAddress2 = entity.getCompanyAddress2();
        if (CompanyAddress2 != null) {
            stmt.bindString(24, CompanyAddress2);
        }
 
        String CompanyCity = entity.getCompanyCity();
        if (CompanyCity != null) {
            stmt.bindString(25, CompanyCity);
        }
 
        Integer CompanyProvince = entity.getCompanyProvince();
        if (CompanyProvince != null) {
            stmt.bindLong(26, CompanyProvince);
        }
 
        Integer DisplayCompanyProvinceLangID = entity.getDisplayCompanyProvinceLangID();
        if (DisplayCompanyProvinceLangID != null) {
            stmt.bindLong(27, DisplayCompanyProvinceLangID);
        }
 
        String CompanyZipCode = entity.getCompanyZipCode();
        if (CompanyZipCode != null) {
            stmt.bindString(28, CompanyZipCode);
        }
 
        String CompanyTelephone = entity.getCompanyTelephone();
        if (CompanyTelephone != null) {
            stmt.bindString(29, CompanyTelephone);
        }
 
        String CompanyFax = entity.getCompanyFax();
        if (CompanyFax != null) {
            stmt.bindString(30, CompanyFax);
        }
 
        String CompanyCountry = entity.getCompanyCountry();
        if (CompanyCountry != null) {
            stmt.bindString(31, CompanyCountry);
        }
 
        String CompanyTaxID = entity.getCompanyTaxID();
        if (CompanyTaxID != null) {
            stmt.bindString(32, CompanyTaxID);
        }
 
        String CompanyRegisterID = entity.getCompanyRegisterID();
        if (CompanyRegisterID != null) {
            stmt.bindString(33, CompanyRegisterID);
        }
 
        String AccountingCode = entity.getAccountingCode();
        if (AccountingCode != null) {
            stmt.bindString(34, AccountingCode);
        }
 
        Double CompanyVAT = entity.getCompanyVAT();
        if (CompanyVAT != null) {
            stmt.bindDouble(35, CompanyVAT);
        }
 
        String DeliveryName = entity.getDeliveryName();
        if (DeliveryName != null) {
            stmt.bindString(36, DeliveryName);
        }
 
        String DeliveryAddress1 = entity.getDeliveryAddress1();
        if (DeliveryAddress1 != null) {
            stmt.bindString(37, DeliveryAddress1);
        }
 
        String DeliveryAddress2 = entity.getDeliveryAddress2();
        if (DeliveryAddress2 != null) {
            stmt.bindString(38, DeliveryAddress2);
        }
 
        String DeliveryCity = entity.getDeliveryCity();
        if (DeliveryCity != null) {
            stmt.bindString(39, DeliveryCity);
        }
 
        Integer DeliveryProvince = entity.getDeliveryProvince();
        if (DeliveryProvince != null) {
            stmt.bindLong(40, DeliveryProvince);
        }
 
        String DeliveryZipCode = entity.getDeliveryZipCode();
        if (DeliveryZipCode != null) {
            stmt.bindString(41, DeliveryZipCode);
        }
 
        String DeliveryTelephone = entity.getDeliveryTelephone();
        if (DeliveryTelephone != null) {
            stmt.bindString(42, DeliveryTelephone);
        }
 
        String DeliveryFax = entity.getDeliveryFax();
        if (DeliveryFax != null) {
            stmt.bindString(43, DeliveryFax);
        }
 
        String IPAddress = entity.getIPAddress();
        if (IPAddress != null) {
            stmt.bindString(44, IPAddress);
        }
 
        String Addtional = entity.getAddtional();
        if (Addtional != null) {
            stmt.bindString(45, Addtional);
        }
 
        Integer ProductLevelOrder = entity.getProductLevelOrder();
        if (ProductLevelOrder != null) {
            stmt.bindLong(46, ProductLevelOrder);
        }
 
        Integer Deleted = entity.getDeleted();
        if (Deleted != null) {
            stmt.bindLong(47, Deleted);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ShopData readEntity(Cursor cursor, int offset) {
        ShopData entity = new ShopData( //
            cursor.getInt(offset + 0), // ShopID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ShopCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ShopName
            cursor.getInt(offset + 3), // IsShop
            cursor.getInt(offset + 4), // IsInv
            cursor.getInt(offset + 5), // MasterShop
            cursor.getInt(offset + 6), // MasterShopLink
            cursor.getInt(offset + 7), // ShowInReport
            cursor.getInt(offset + 8), // ShopTypeID
            cursor.getInt(offset + 9), // ShopCatID1
            cursor.getInt(offset + 10), // ShopCatID2
            cursor.getInt(offset + 11), // ShopCatID3
            cursor.getInt(offset + 12), // ShopCatID4
            cursor.getInt(offset + 13), // ShopCatID5
            cursor.getInt(offset + 14), // ShopCatID6
            cursor.getInt(offset + 15), // ShopCatID7
            cursor.getInt(offset + 16), // ShopCatID8
            cursor.getInt(offset + 17), // ShopCatID9
            cursor.getInt(offset + 18), // ShopCatID10
            cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)), // OpenHour
            cursor.isNull(offset + 20) ? null : new java.util.Date(cursor.getLong(offset + 20)), // CloseHour
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // CompanyName
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // CompanyAddress1
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // CompanyAddress2
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // CompanyCity
            cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25), // CompanyProvince
            cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26), // DisplayCompanyProvinceLangID
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // CompanyZipCode
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // CompanyTelephone
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // CompanyFax
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // CompanyCountry
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // CompanyTaxID
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // CompanyRegisterID
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // AccountingCode
            cursor.isNull(offset + 34) ? null : cursor.getDouble(offset + 34), // CompanyVAT
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // DeliveryName
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // DeliveryAddress1
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // DeliveryAddress2
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // DeliveryCity
            cursor.isNull(offset + 39) ? null : cursor.getInt(offset + 39), // DeliveryProvince
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // DeliveryZipCode
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // DeliveryTelephone
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // DeliveryFax
            cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43), // IPAddress
            cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44), // Addtional
            cursor.isNull(offset + 45) ? null : cursor.getInt(offset + 45), // ProductLevelOrder
            cursor.isNull(offset + 46) ? null : cursor.getInt(offset + 46) // Deleted
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ShopData entity, int offset) {
        entity.setShopID(cursor.getInt(offset + 0));
        entity.setShopCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setShopName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsShop(cursor.getInt(offset + 3));
        entity.setIsInv(cursor.getInt(offset + 4));
        entity.setMasterShop(cursor.getInt(offset + 5));
        entity.setMasterShopLink(cursor.getInt(offset + 6));
        entity.setShowInReport(cursor.getInt(offset + 7));
        entity.setShopTypeID(cursor.getInt(offset + 8));
        entity.setShopCatID1(cursor.getInt(offset + 9));
        entity.setShopCatID2(cursor.getInt(offset + 10));
        entity.setShopCatID3(cursor.getInt(offset + 11));
        entity.setShopCatID4(cursor.getInt(offset + 12));
        entity.setShopCatID5(cursor.getInt(offset + 13));
        entity.setShopCatID6(cursor.getInt(offset + 14));
        entity.setShopCatID7(cursor.getInt(offset + 15));
        entity.setShopCatID8(cursor.getInt(offset + 16));
        entity.setShopCatID9(cursor.getInt(offset + 17));
        entity.setShopCatID10(cursor.getInt(offset + 18));
        entity.setOpenHour(cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)));
        entity.setCloseHour(cursor.isNull(offset + 20) ? null : new java.util.Date(cursor.getLong(offset + 20)));
        entity.setCompanyName(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setCompanyAddress1(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setCompanyAddress2(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setCompanyCity(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setCompanyProvince(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
        entity.setDisplayCompanyProvinceLangID(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
        entity.setCompanyZipCode(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setCompanyTelephone(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setCompanyFax(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setCompanyCountry(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setCompanyTaxID(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setCompanyRegisterID(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setAccountingCode(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setCompanyVAT(cursor.isNull(offset + 34) ? null : cursor.getDouble(offset + 34));
        entity.setDeliveryName(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setDeliveryAddress1(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setDeliveryAddress2(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setDeliveryCity(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setDeliveryProvince(cursor.isNull(offset + 39) ? null : cursor.getInt(offset + 39));
        entity.setDeliveryZipCode(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setDeliveryTelephone(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setDeliveryFax(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setIPAddress(cursor.isNull(offset + 43) ? null : cursor.getString(offset + 43));
        entity.setAddtional(cursor.isNull(offset + 44) ? null : cursor.getString(offset + 44));
        entity.setProductLevelOrder(cursor.isNull(offset + 45) ? null : cursor.getInt(offset + 45));
        entity.setDeleted(cursor.isNull(offset + 46) ? null : cursor.getInt(offset + 46));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(ShopData entity, long rowId) {
        return entity.getShopID();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(ShopData entity) {
        if(entity != null) {
            return entity.getShopID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
