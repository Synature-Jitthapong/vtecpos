package com.vtec.j1tth4.vtecpos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vtec.j1tth4.vtecpos.dao.FcCardHistory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table fc_cardhistory.
*/
public class FcCardHistoryDao extends AbstractDao<FcCardHistory, Integer> {

    public static final String TABLENAME = "fc_cardhistory";

    /**
     * Properties of entity FcCardHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property HistoryID = new Property(0, Integer.class, "HistoryID", true, "HistoryID");
        public final static Property TranUUID = new Property(1, Integer.class, "TranUUID", false, "TranUUID");
        public final static Property CardID = new Property(2, Integer.class, "CardID", false, "CardID");
        public final static Property CardNo = new Property(3, String.class, "CardNo", false, "CardNo");
        public final static Property TransactionID = new Property(4, Integer.class, "TransactionID", false, "TransactionID");
        public final static Property ComputerID = new Property(5, Integer.class, "ComputerID", false, "ComputerID");
        public final static Property ShopID = new Property(6, Integer.class, "ShopID", false, "ShopID");
        public final static Property SaleDate = new Property(7, String.class, "SaleDate", false, "SaleDate");
        public final static Property ReceiptNo = new Property(8, String.class, "ReceiptNo", false, "ReceiptNo");
        public final static Property PreviousBalance = new Property(9, Double.class, "PreviousBalance", false, "PreviousBalance");
        public final static Property TranAmount = new Property(10, Double.class, "TranAmount", false, "TranAmount");
        public final static Property DocType = new Property(11, Integer.class, "DocType", false, "DocType");
        public final static Property StaffID = new Property(12, Integer.class, "StaffID", false, "StaffID");
        public final static Property InsertDate = new Property(13, String.class, "InsertDate", false, "InsertDate");
    };


    public FcCardHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public FcCardHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FcCardHistory entity) {
        stmt.clearBindings();
 
        Integer HistoryID = entity.getHistoryID();
        if (HistoryID != null) {
            stmt.bindLong(1, HistoryID);
        }
 
        Integer TranUUID = entity.getTranUUID();
        if (TranUUID != null) {
            stmt.bindLong(2, TranUUID);
        }
 
        Integer CardID = entity.getCardID();
        if (CardID != null) {
            stmt.bindLong(3, CardID);
        }
 
        String CardNo = entity.getCardNo();
        if (CardNo != null) {
            stmt.bindString(4, CardNo);
        }
 
        Integer TransactionID = entity.getTransactionID();
        if (TransactionID != null) {
            stmt.bindLong(5, TransactionID);
        }
 
        Integer ComputerID = entity.getComputerID();
        if (ComputerID != null) {
            stmt.bindLong(6, ComputerID);
        }
 
        Integer ShopID = entity.getShopID();
        if (ShopID != null) {
            stmt.bindLong(7, ShopID);
        }
 
        String SaleDate = entity.getSaleDate();
        if (SaleDate != null) {
            stmt.bindString(8, SaleDate);
        }
 
        String ReceiptNo = entity.getReceiptNo();
        if (ReceiptNo != null) {
            stmt.bindString(9, ReceiptNo);
        }
 
        Double PreviousBalance = entity.getPreviousBalance();
        if (PreviousBalance != null) {
            stmt.bindDouble(10, PreviousBalance);
        }
 
        Double TranAmount = entity.getTranAmount();
        if (TranAmount != null) {
            stmt.bindDouble(11, TranAmount);
        }
 
        Integer DocType = entity.getDocType();
        if (DocType != null) {
            stmt.bindLong(12, DocType);
        }
 
        Integer StaffID = entity.getStaffID();
        if (StaffID != null) {
            stmt.bindLong(13, StaffID);
        }
 
        String InsertDate = entity.getInsertDate();
        if (InsertDate != null) {
            stmt.bindString(14, InsertDate);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FcCardHistory readEntity(Cursor cursor, int offset) {
        FcCardHistory entity = new FcCardHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // HistoryID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // TranUUID
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // CardID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CardNo
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // TransactionID
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // ComputerID
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // ShopID
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // SaleDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ReceiptNo
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // PreviousBalance
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // TranAmount
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // DocType
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // StaffID
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // InsertDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FcCardHistory entity, int offset) {
        entity.setHistoryID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setTranUUID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setCardID(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setCardNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTransactionID(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setComputerID(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setShopID(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setSaleDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setReceiptNo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPreviousBalance(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setTranAmount(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setDocType(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setStaffID(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setInsertDate(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(FcCardHistory entity, long rowId) {
        return entity.getHistoryID();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(FcCardHistory entity) {
        if(entity != null) {
            return entity.getHistoryID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
