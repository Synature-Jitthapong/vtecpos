package com.vtec.j1tth4.vtecpos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vtec.j1tth4.vtecpos.dao.ProductPriceGroupDate;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ProductPriceGroupDate.
*/
public class ProductPriceGroupDateDao extends AbstractDao<ProductPriceGroupDate, Integer> {

    public static final String TABLENAME = "ProductPriceGroupDate";

    /**
     * Properties of entity ProductPriceGroupDate.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PriceGroupDateID = new Property(0, Integer.class, "PriceGroupDateID", true, "PriceGroupDateID");
        public final static Property FromDate = new Property(1, java.util.Date.class, "FromDate", false, "FromDate");
        public final static Property ToDate = new Property(2, java.util.Date.class, "ToDate", false, "ToDate");
        public final static Property Deleted = new Property(3, Integer.class, "Deleted", false, "Deleted");
    };


    public ProductPriceGroupDateDao(DaoConfig config) {
        super(config);
    }
    
    public ProductPriceGroupDateDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProductPriceGroupDate entity) {
        stmt.clearBindings();
 
        Integer PriceGroupDateID = entity.getPriceGroupDateID();
        if (PriceGroupDateID != null) {
            stmt.bindLong(1, PriceGroupDateID);
        }
 
        java.util.Date FromDate = entity.getFromDate();
        if (FromDate != null) {
            stmt.bindLong(2, FromDate.getTime());
        }
 
        java.util.Date ToDate = entity.getToDate();
        if (ToDate != null) {
            stmt.bindLong(3, ToDate.getTime());
        }
 
        Integer Deleted = entity.getDeleted();
        if (Deleted != null) {
            stmt.bindLong(4, Deleted);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ProductPriceGroupDate readEntity(Cursor cursor, int offset) {
        ProductPriceGroupDate entity = new ProductPriceGroupDate( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // PriceGroupDateID
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // FromDate
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // ToDate
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // Deleted
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProductPriceGroupDate entity, int offset) {
        entity.setPriceGroupDateID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setFromDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setToDate(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setDeleted(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(ProductPriceGroupDate entity, long rowId) {
        return entity.getPriceGroupDateID();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(ProductPriceGroupDate entity) {
        if(entity != null) {
            return entity.getPriceGroupDateID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
