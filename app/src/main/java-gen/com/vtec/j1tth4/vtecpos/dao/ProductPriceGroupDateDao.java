package com.vtec.j1tth4.vtecpos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vtec.j1tth4.vtecpos.dao.ProductPriceGroupDate;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PRODUCT_PRICE_GROUP_DATE.
*/
public class ProductPriceGroupDateDao extends AbstractDao<ProductPriceGroupDate, Void> {

    public static final String TABLENAME = "PRODUCT_PRICE_GROUP_DATE";

    /**
     * Properties of entity ProductPriceGroupDate.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PriceGroupDateID = new Property(0, int.class, "PriceGroupDateID", true, "PRICE_GROUP_DATE_ID");
        public final static Property PriceGroupID = new Property(1, int.class, "PriceGroupID", true, "PRICE_GROUP_ID");
        public final static Property FromDate = new Property(2, java.util.Date.class, "FromDate", false, "FROM_DATE");
        public final static Property ToDate = new Property(3, java.util.Date.class, "ToDate", false, "TO_DATE");
        public final static Property Deleted = new Property(4, int.class, "Deleted", false, "DELETED");
    };


    public ProductPriceGroupDateDao(DaoConfig config) {
        super(config);
    }
    
    public ProductPriceGroupDateDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PRODUCT_PRICE_GROUP_DATE' (" + //
                "'PRICE_GROUP_DATE_ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: PriceGroupDateID
                "'PRICE_GROUP_ID' INTEGER PRIMARY KEY NOT NULL ," + // 1: PriceGroupID
                "'FROM_DATE' INTEGER NOT NULL ," + // 2: FromDate
                "'TO_DATE' INTEGER NOT NULL ," + // 3: ToDate
                "'DELETED' INTEGER NOT NULL );"); // 4: Deleted
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PRODUCT_PRICE_GROUP_DATE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProductPriceGroupDate entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPriceGroupDateID());
        stmt.bindLong(2, entity.getPriceGroupID());
        stmt.bindLong(3, entity.getFromDate().getTime());
        stmt.bindLong(4, entity.getToDate().getTime());
        stmt.bindLong(5, entity.getDeleted());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public ProductPriceGroupDate readEntity(Cursor cursor, int offset) {
        ProductPriceGroupDate entity = new ProductPriceGroupDate( //
            cursor.getInt(offset + 0), // PriceGroupDateID
            cursor.getInt(offset + 1), // PriceGroupID
            new java.util.Date(cursor.getLong(offset + 2)), // FromDate
            new java.util.Date(cursor.getLong(offset + 3)), // ToDate
            cursor.getInt(offset + 4) // Deleted
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProductPriceGroupDate entity, int offset) {
        entity.setPriceGroupDateID(cursor.getInt(offset + 0));
        entity.setPriceGroupID(cursor.getInt(offset + 1));
        entity.setFromDate(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setToDate(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setDeleted(cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(ProductPriceGroupDate entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(ProductPriceGroupDate entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
