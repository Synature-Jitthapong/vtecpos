package com.vtec.j1tth4.vtecpos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vtec.j1tth4.vtecpos.dao.ShopCategory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SHOP_CATEGORY.
*/
public class ShopCategoryDao extends AbstractDao<ShopCategory, Integer> {

    public static final String TABLENAME = "SHOP_CATEGORY";

    /**
     * Properties of entity ShopCategory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ShopCatID = new Property(0, int.class, "ShopCatID", true, "SHOP_CAT_ID");
        public final static Property ShopCatGroupID = new Property(1, int.class, "ShopCatGroupID", false, "SHOP_CAT_GROUP_ID");
        public final static Property ShopCatName = new Property(2, String.class, "ShopCatName", false, "SHOP_CAT_NAME");
        public final static Property LangID = new Property(3, int.class, "LangID", false, "LANG_ID");
        public final static Property Deleted = new Property(4, Integer.class, "Deleted", false, "DELETED");
    };


    public ShopCategoryDao(DaoConfig config) {
        super(config);
    }
    
    public ShopCategoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SHOP_CATEGORY' (" + //
                "'SHOP_CAT_ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: ShopCatID
                "'SHOP_CAT_GROUP_ID' INTEGER NOT NULL ," + // 1: ShopCatGroupID
                "'SHOP_CAT_NAME' TEXT NOT NULL ," + // 2: ShopCatName
                "'LANG_ID' INTEGER NOT NULL ," + // 3: LangID
                "'DELETED' INTEGER);"); // 4: Deleted
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SHOP_CATEGORY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ShopCategory entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getShopCatID());
        stmt.bindLong(2, entity.getShopCatGroupID());
        stmt.bindString(3, entity.getShopCatName());
        stmt.bindLong(4, entity.getLangID());
 
        Integer Deleted = entity.getDeleted();
        if (Deleted != null) {
            stmt.bindLong(5, Deleted);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ShopCategory readEntity(Cursor cursor, int offset) {
        ShopCategory entity = new ShopCategory( //
            cursor.getInt(offset + 0), // ShopCatID
            cursor.getInt(offset + 1), // ShopCatGroupID
            cursor.getString(offset + 2), // ShopCatName
            cursor.getInt(offset + 3), // LangID
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // Deleted
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ShopCategory entity, int offset) {
        entity.setShopCatID(cursor.getInt(offset + 0));
        entity.setShopCatGroupID(cursor.getInt(offset + 1));
        entity.setShopCatName(cursor.getString(offset + 2));
        entity.setLangID(cursor.getInt(offset + 3));
        entity.setDeleted(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(ShopCategory entity, long rowId) {
        return entity.getShopCatID();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(ShopCategory entity) {
        if(entity != null) {
            return entity.getShopCatID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
