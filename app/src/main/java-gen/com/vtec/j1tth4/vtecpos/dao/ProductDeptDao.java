package com.vtec.j1tth4.vtecpos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vtec.j1tth4.vtecpos.dao.ProductDept;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PRODUCT_DEPT.
*/
public class ProductDeptDao extends AbstractDao<ProductDept, Integer> {

    public static final String TABLENAME = "PRODUCT_DEPT";

    /**
     * Properties of entity ProductDept.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ProductDeptID = new Property(0, int.class, "ProductDeptID", true, "PRODUCT_DEPT_ID");
        public final static Property ProductGroupID = new Property(1, int.class, "ProductGroupID", false, "PRODUCT_GROUP_ID");
        public final static Property ShopID = new Property(2, int.class, "ShopID", false, "SHOP_ID");
        public final static Property ProductDeptCode = new Property(3, String.class, "ProductDeptCode", false, "PRODUCT_DEPT_CODE");
        public final static Property ProductDeptName = new Property(4, String.class, "ProductDeptName", false, "PRODUCT_DEPT_NAME");
        public final static Property ProductDeptNameLang1 = new Property(5, String.class, "ProductDeptNameLang1", false, "PRODUCT_DEPT_NAME_LANG1");
        public final static Property ProductDeptNameLang2 = new Property(6, String.class, "ProductDeptNameLang2", false, "PRODUCT_DEPT_NAME_LANG2");
        public final static Property ProductDeptNameLang3 = new Property(7, String.class, "ProductDeptNameLang3", false, "PRODUCT_DEPT_NAME_LANG3");
        public final static Property ProductDeptNameLang4 = new Property(8, String.class, "ProductDeptNameLang4", false, "PRODUCT_DEPT_NAME_LANG4");
        public final static Property ProductDeptNameLang5 = new Property(9, String.class, "ProductDeptNameLang5", false, "PRODUCT_DEPT_NAME_LANG5");
        public final static Property ProductDeptActivate = new Property(10, int.class, "ProductDeptActivate", false, "PRODUCT_DEPT_ACTIVATE");
        public final static Property ProductDeptSaleMode = new Property(11, int.class, "ProductDeptSaleMode", false, "PRODUCT_DEPT_SALE_MODE");
        public final static Property ProductDeptOrdering = new Property(12, int.class, "ProductDeptOrdering", false, "PRODUCT_DEPT_ORDERING");
        public final static Property PrintProductForSession = new Property(13, int.class, "PrintProductForSession", false, "PRINT_PRODUCT_FOR_SESSION");
        public final static Property PrintReceiptGroupingDept = new Property(14, Integer.class, "PrintReceiptGroupingDept", false, "PRINT_RECEIPT_GROUPING_DEPT");
        public final static Property DisplayMobile = new Property(15, int.class, "DisplayMobile", false, "DISPLAY_MOBILE");
        public final static Property AddingFromBranch = new Property(16, int.class, "AddingFromBranch", false, "ADDING_FROM_BRANCH");
        public final static Property Deleted = new Property(17, int.class, "Deleted", false, "DELETED");
    };


    public ProductDeptDao(DaoConfig config) {
        super(config);
    }
    
    public ProductDeptDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PRODUCT_DEPT' (" + //
                "'PRODUCT_DEPT_ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: ProductDeptID
                "'PRODUCT_GROUP_ID' INTEGER NOT NULL ," + // 1: ProductGroupID
                "'SHOP_ID' INTEGER NOT NULL ," + // 2: ShopID
                "'PRODUCT_DEPT_CODE' TEXT," + // 3: ProductDeptCode
                "'PRODUCT_DEPT_NAME' TEXT," + // 4: ProductDeptName
                "'PRODUCT_DEPT_NAME_LANG1' TEXT," + // 5: ProductDeptNameLang1
                "'PRODUCT_DEPT_NAME_LANG2' TEXT," + // 6: ProductDeptNameLang2
                "'PRODUCT_DEPT_NAME_LANG3' TEXT," + // 7: ProductDeptNameLang3
                "'PRODUCT_DEPT_NAME_LANG4' TEXT," + // 8: ProductDeptNameLang4
                "'PRODUCT_DEPT_NAME_LANG5' TEXT," + // 9: ProductDeptNameLang5
                "'PRODUCT_DEPT_ACTIVATE' INTEGER NOT NULL ," + // 10: ProductDeptActivate
                "'PRODUCT_DEPT_SALE_MODE' INTEGER NOT NULL ," + // 11: ProductDeptSaleMode
                "'PRODUCT_DEPT_ORDERING' INTEGER NOT NULL ," + // 12: ProductDeptOrdering
                "'PRINT_PRODUCT_FOR_SESSION' INTEGER NOT NULL ," + // 13: PrintProductForSession
                "'PRINT_RECEIPT_GROUPING_DEPT' INTEGER," + // 14: PrintReceiptGroupingDept
                "'DISPLAY_MOBILE' INTEGER NOT NULL ," + // 15: DisplayMobile
                "'ADDING_FROM_BRANCH' INTEGER NOT NULL ," + // 16: AddingFromBranch
                "'DELETED' INTEGER NOT NULL );"); // 17: Deleted
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PRODUCT_DEPT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProductDept entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getProductDeptID());
        stmt.bindLong(2, entity.getProductGroupID());
        stmt.bindLong(3, entity.getShopID());
 
        String ProductDeptCode = entity.getProductDeptCode();
        if (ProductDeptCode != null) {
            stmt.bindString(4, ProductDeptCode);
        }
 
        String ProductDeptName = entity.getProductDeptName();
        if (ProductDeptName != null) {
            stmt.bindString(5, ProductDeptName);
        }
 
        String ProductDeptNameLang1 = entity.getProductDeptNameLang1();
        if (ProductDeptNameLang1 != null) {
            stmt.bindString(6, ProductDeptNameLang1);
        }
 
        String ProductDeptNameLang2 = entity.getProductDeptNameLang2();
        if (ProductDeptNameLang2 != null) {
            stmt.bindString(7, ProductDeptNameLang2);
        }
 
        String ProductDeptNameLang3 = entity.getProductDeptNameLang3();
        if (ProductDeptNameLang3 != null) {
            stmt.bindString(8, ProductDeptNameLang3);
        }
 
        String ProductDeptNameLang4 = entity.getProductDeptNameLang4();
        if (ProductDeptNameLang4 != null) {
            stmt.bindString(9, ProductDeptNameLang4);
        }
 
        String ProductDeptNameLang5 = entity.getProductDeptNameLang5();
        if (ProductDeptNameLang5 != null) {
            stmt.bindString(10, ProductDeptNameLang5);
        }
        stmt.bindLong(11, entity.getProductDeptActivate());
        stmt.bindLong(12, entity.getProductDeptSaleMode());
        stmt.bindLong(13, entity.getProductDeptOrdering());
        stmt.bindLong(14, entity.getPrintProductForSession());
 
        Integer PrintReceiptGroupingDept = entity.getPrintReceiptGroupingDept();
        if (PrintReceiptGroupingDept != null) {
            stmt.bindLong(15, PrintReceiptGroupingDept);
        }
        stmt.bindLong(16, entity.getDisplayMobile());
        stmt.bindLong(17, entity.getAddingFromBranch());
        stmt.bindLong(18, entity.getDeleted());
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ProductDept readEntity(Cursor cursor, int offset) {
        ProductDept entity = new ProductDept( //
            cursor.getInt(offset + 0), // ProductDeptID
            cursor.getInt(offset + 1), // ProductGroupID
            cursor.getInt(offset + 2), // ShopID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ProductDeptCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ProductDeptName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ProductDeptNameLang1
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ProductDeptNameLang2
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ProductDeptNameLang3
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ProductDeptNameLang4
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ProductDeptNameLang5
            cursor.getInt(offset + 10), // ProductDeptActivate
            cursor.getInt(offset + 11), // ProductDeptSaleMode
            cursor.getInt(offset + 12), // ProductDeptOrdering
            cursor.getInt(offset + 13), // PrintProductForSession
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // PrintReceiptGroupingDept
            cursor.getInt(offset + 15), // DisplayMobile
            cursor.getInt(offset + 16), // AddingFromBranch
            cursor.getInt(offset + 17) // Deleted
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProductDept entity, int offset) {
        entity.setProductDeptID(cursor.getInt(offset + 0));
        entity.setProductGroupID(cursor.getInt(offset + 1));
        entity.setShopID(cursor.getInt(offset + 2));
        entity.setProductDeptCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProductDeptName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProductDeptNameLang1(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProductDeptNameLang2(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setProductDeptNameLang3(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setProductDeptNameLang4(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setProductDeptNameLang5(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setProductDeptActivate(cursor.getInt(offset + 10));
        entity.setProductDeptSaleMode(cursor.getInt(offset + 11));
        entity.setProductDeptOrdering(cursor.getInt(offset + 12));
        entity.setPrintProductForSession(cursor.getInt(offset + 13));
        entity.setPrintReceiptGroupingDept(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setDisplayMobile(cursor.getInt(offset + 15));
        entity.setAddingFromBranch(cursor.getInt(offset + 16));
        entity.setDeleted(cursor.getInt(offset + 17));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(ProductDept entity, long rowId) {
        return entity.getProductDeptID();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(ProductDept entity) {
        if(entity != null) {
            return entity.getProductDeptID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
