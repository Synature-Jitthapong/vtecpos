package com.vtec.j1tth4.vtecpos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vtec.j1tth4.vtecpos.dao.ProductVat;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PRODUCT_VAT.
*/
public class ProductVatDao extends AbstractDao<ProductVat, Integer> {

    public static final String TABLENAME = "PRODUCT_VAT";

    /**
     * Properties of entity ProductVat.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ProductVATID = new Property(0, int.class, "ProductVATID", true, "PRODUCT_VATID");
        public final static Property ProductVATCode = new Property(1, String.class, "ProductVATCode", false, "PRODUCT_VATCODE");
        public final static Property ProductVATPercent = new Property(2, double.class, "ProductVATPercent", false, "PRODUCT_VATPERCENT");
        public final static Property Deleted = new Property(3, int.class, "Deleted", false, "DELETED");
    };


    public ProductVatDao(DaoConfig config) {
        super(config);
    }
    
    public ProductVatDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProductVat entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getProductVATID());
        stmt.bindString(2, entity.getProductVATCode());
        stmt.bindDouble(3, entity.getProductVATPercent());
        stmt.bindLong(4, entity.getDeleted());
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ProductVat readEntity(Cursor cursor, int offset) {
        ProductVat entity = new ProductVat( //
            cursor.getInt(offset + 0), // ProductVATID
            cursor.getString(offset + 1), // ProductVATCode
            cursor.getDouble(offset + 2), // ProductVATPercent
            cursor.getInt(offset + 3) // Deleted
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProductVat entity, int offset) {
        entity.setProductVATID(cursor.getInt(offset + 0));
        entity.setProductVATCode(cursor.getString(offset + 1));
        entity.setProductVATPercent(cursor.getDouble(offset + 2));
        entity.setDeleted(cursor.getInt(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(ProductVat entity, long rowId) {
        return entity.getProductVATID();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(ProductVat entity) {
        if(entity != null) {
            return entity.getProductVATID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
