package com.vtec.j1tth4.vtecpos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vtec.j1tth4.vtecpos.dao.OrderTransaction;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table OrderTransaction.
*/
public class OrderTransactionDao extends AbstractDao<OrderTransaction, Void> {

    public static final String TABLENAME = "OrderTransaction";

    /**
     * Properties of entity OrderTransaction.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property TransactionID = new Property(0, Integer.class, "TransactionID", true, "TransactionID");
        public final static Property ComputerID = new Property(1, Integer.class, "ComputerID", true, "ComputerID");
        public final static Property TransactionUUID = new Property(2, String.class, "TransactionUUID", false, "TransactionUUID");
        public final static Property ReserveTime = new Property(3, java.util.Date.class, "ReserveTime", false, "ReserveTime");
        public final static Property ReserveStaffID = new Property(4, Integer.class, "ReserveStaffID", false, "ReserveStaffID");
        public final static Property OpenTime = new Property(5, java.util.Date.class, "OpenTime", false, "OpenTime");
        public final static Property OpenStaffID = new Property(6, Integer.class, "OpenStaffID", false, "OpenStaffID");
        public final static Property PaidTime = new Property(7, java.util.Date.class, "PaidTime", false, "PaidTime");
        public final static Property PaidStaffID = new Property(8, Integer.class, "PaidStaffID", false, "PaidStaffID");
        public final static Property CloseTime = new Property(9, java.util.Date.class, "CloseTime", false, "CloseTime");
        public final static Property CommStaffID = new Property(10, Integer.class, "CommStaffID", false, "CommStaffID");
        public final static Property DiscountItem = new Property(11, Double.class, "DiscountItem", false, "DiscountItem");
        public final static Property DiscountBill = new Property(12, Double.class, "DiscountBill", false, "DiscountBill");
        public final static Property DiscountOther = new Property(13, Double.class, "DiscountOther", false, "DiscountOther");
        public final static Property TotalDiscount = new Property(14, Double.class, "TotalDiscount", false, "TotalDiscount");
        public final static Property TransactionStatusID = new Property(15, Integer.class, "TransactionStatusID", false, "TransactionStatusID");
        public final static Property SaleMode = new Property(16, Integer.class, "SaleMode", false, "SaleMode");
        public final static Property TransactionName = new Property(17, String.class, "TransactionName", false, "TransactionName");
        public final static Property QueueName = new Property(18, String.class, "QueueName", false, "QueueName");
        public final static Property NoCustomer = new Property(19, Integer.class, "NoCustomer", false, "NoCustomer");
        public final static Property NoCustomerWhenOpen = new Property(20, Integer.class, "NoCustomerWhenOpen", false, "NoCustomerWhenOpen");
        public final static Property DocType = new Property(21, Integer.class, "DocType", false, "DocType");
        public final static Property ReceiptYear = new Property(22, Integer.class, "ReceiptYear", false, "ReceiptYear");
        public final static Property ReceiptMonth = new Property(23, Integer.class, "ReceiptMonth", false, "ReceiptMonth");
        public final static Property ReceiptID = new Property(24, Integer.class, "ReceiptID", false, "ReceiptID");
        public final static Property ReceiptNumber = new Property(25, String.class, "ReceiptNumber", false, "ReceiptNumber");
        public final static Property SaleDate = new Property(26, java.util.Date.class, "SaleDate", false, "SaleDate");
        public final static Property ShopID = new Property(27, Integer.class, "ShopID", false, "ShopID");
        public final static Property TransactionVAT = new Property(28, Double.class, "TransactionVAT", false, "TransactionVAT");
        public final static Property TransactionVATable = new Property(29, Double.class, "TransactionVATable", false, "TransactionVATable");
        public final static Property TranBeforeVAT = new Property(30, Double.class, "TranBeforeVAT", false, "TranBeforeVAT");
        public final static Property VATCode = new Property(31, String.class, "VATCode", false, "VATCode");
        public final static Property VATPercent = new Property(32, Double.class, "VATPercent", false, "VATPercent");
        public final static Property ServiceChargePercent = new Property(33, Double.class, "ServiceChargePercent", false, "ServiceChargePercent");
        public final static Property ServiceCharge = new Property(34, Double.class, "ServiceCharge", false, "ServiceCharge");
        public final static Property ServiceChargeVAT = new Property(35, Double.class, "ServiceChargeVAT", false, "ServiceChargeVAT");
        public final static Property SCBeforeVAT = new Property(36, Double.class, "SCBeforeVAT", false, "SCBeforeVAT");
        public final static Property OtherIncome = new Property(37, Double.class, "OtherIncome", false, "OtherIncome");
        public final static Property OtherIncomeVAT = new Property(38, Double.class, "OtherIncomeVAT", false, "OtherIncomeVAT");
        public final static Property OhterIncomeBeforeVAT = new Property(39, Double.class, "OhterIncomeBeforeVAT", false, "OhterIncomeBeforeVAT");
        public final static Property ReceiptTotalQty = new Property(40, Double.class, "ReceiptTotalQty", false, "ReceiptTotalQty");
        public final static Property ReceiptRetailPrice = new Property(41, Double.class, "ReceiptRetailPrice", false, "ReceiptRetailPrice");
        public final static Property ReceiptDiscount = new Property(42, Double.class, "ReceiptDiscount", false, "ReceiptDiscount");
        public final static Property ReceiptSalePrice = new Property(43, Double.class, "ReceiptSalePrice", false, "ReceiptSalePrice");
        public final static Property ReceiptNetSale = new Property(44, Double.class, "ReceiptNetSale", false, "ReceiptNetSale");
        public final static Property ReceiptPayPrice = new Property(45, Double.class, "ReceiptPayPrice", false, "ReceiptPayPrice");
        public final static Property ReceiptRoundingBill = new Property(46, Double.class, "ReceiptRoundingBill", false, "ReceiptRoundingBill");
        public final static Property SessionID = new Property(47, Integer.class, "SessionID", false, "SessionID");
        public final static Property CloseComputerID = new Property(48, Integer.class, "CloseComputerID", false, "CloseComputerID");
        public final static Property VoidStaffID = new Property(49, Integer.class, "VoidStaffID", false, "VoidStaffID");
        public final static Property VoidReason = new Property(50, String.class, "VoidReason", false, "VoidReason");
        public final static Property VoidTime = new Property(51, java.util.Date.class, "VoidTime", false, "VoidTime");
        public final static Property IsCloneBill = new Property(52, Integer.class, "IsCloneBill", false, "IsCloneBill");
        public final static Property VoidTranID = new Property(53, Integer.class, "VoidTranID", false, "VoidTranID");
        public final static Property VoidComID = new Property(54, Integer.class, "VoidComID", false, "VoidComID");
        public final static Property DiffCloneBill = new Property(55, Double.class, "DiffCloneBill", false, "DiffCloneBill");
        public final static Property MemberID = new Property(56, Integer.class, "MemberID", false, "MemberID");
        public final static Property HasOrder = new Property(57, Integer.class, "HasOrder", false, "HasOrder");
        public final static Property NoPrintBillDetail = new Property(58, Integer.class, "NoPrintBillDetail", false, "NoPrintBillDetail");
        public final static Property DiffPayCheckBill = new Property(59, Double.class, "DiffPayCheckBill", false, "DiffPayCheckBill");
        public final static Property BillDetailReferenceNo = new Property(60, String.class, "BillDetailReferenceNo", false, "BillDetailReferenceNo");
        public final static Property CallForCheckBill = new Property(61, Integer.class, "CallForCheckBill", false, "CallForCheckBill");
        public final static Property TransactionNote = new Property(62, String.class, "TransactionNote", false, "TransactionNote");
        public final static Property CurrentAccessComputer = new Property(63, Integer.class, "CurrentAccessComputer", false, "CurrentAccessComputer");
        public final static Property UpdateDate = new Property(64, java.util.Date.class, "UpdateDate", false, "UpdateDate");
        public final static Property BeginTime = new Property(65, java.util.Date.class, "BeginTime", false, "BeginTime");
        public final static Property EndTime = new Property(66, java.util.Date.class, "EndTime", false, "EndTime");
        public final static Property PrintWarningTime = new Property(67, java.util.Date.class, "PrintWarningTime", false, "PrintWarningTime");
        public final static Property PrintBeginTime = new Property(68, java.util.Date.class, "PrintBeginTime", false, "PrintBeginTime");
        public final static Property AlreadyCalculateStock = new Property(69, Integer.class, "AlreadyCalculateStock", false, "AlreadyCalculateStock");
        public final static Property AlreadyExportToHQ = new Property(70, Integer.class, "AlreadyExportToHQ", false, "AlreadyExportToHQ");
        public final static Property TableID = new Property(71, Integer.class, "TableID", false, "TableID");
        public final static Property IsSplitTransaction = new Property(72, Integer.class, "IsSplitTransaction", false, "IsSplitTransaction");
        public final static Property IsFromOtherTransaction = new Property(73, Integer.class, "IsFromOtherTransaction", false, "IsFromOtherTransaction");
        public final static Property ReferenceNo = new Property(74, String.class, "ReferenceNo", false, "ReferenceNo");
        public final static Property FromDepositTransactionID = new Property(75, Integer.class, "FromDepositTransactionID", false, "FromDepositTransactionID");
        public final static Property FromDepositComputerID = new Property(76, Integer.class, "FromDepositComputerID", false, "FromDepositComputerID");
        public final static Property Deleted = new Property(77, Integer.class, "Deleted", false, "Deleted");
    };


    public OrderTransactionDao(DaoConfig config) {
        super(config);
    }
    
    public OrderTransactionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OrderTransaction entity) {
        stmt.clearBindings();
 
        Integer TransactionID = entity.getTransactionID();
        if (TransactionID != null) {
            stmt.bindLong(1, TransactionID);
        }
 
        Integer ComputerID = entity.getComputerID();
        if (ComputerID != null) {
            stmt.bindLong(2, ComputerID);
        }
 
        String TransactionUUID = entity.getTransactionUUID();
        if (TransactionUUID != null) {
            stmt.bindString(3, TransactionUUID);
        }
 
        java.util.Date ReserveTime = entity.getReserveTime();
        if (ReserveTime != null) {
            stmt.bindLong(4, ReserveTime.getTime());
        }
 
        Integer ReserveStaffID = entity.getReserveStaffID();
        if (ReserveStaffID != null) {
            stmt.bindLong(5, ReserveStaffID);
        }
 
        java.util.Date OpenTime = entity.getOpenTime();
        if (OpenTime != null) {
            stmt.bindLong(6, OpenTime.getTime());
        }
 
        Integer OpenStaffID = entity.getOpenStaffID();
        if (OpenStaffID != null) {
            stmt.bindLong(7, OpenStaffID);
        }
 
        java.util.Date PaidTime = entity.getPaidTime();
        if (PaidTime != null) {
            stmt.bindLong(8, PaidTime.getTime());
        }
 
        Integer PaidStaffID = entity.getPaidStaffID();
        if (PaidStaffID != null) {
            stmt.bindLong(9, PaidStaffID);
        }
 
        java.util.Date CloseTime = entity.getCloseTime();
        if (CloseTime != null) {
            stmt.bindLong(10, CloseTime.getTime());
        }
 
        Integer CommStaffID = entity.getCommStaffID();
        if (CommStaffID != null) {
            stmt.bindLong(11, CommStaffID);
        }
 
        Double DiscountItem = entity.getDiscountItem();
        if (DiscountItem != null) {
            stmt.bindDouble(12, DiscountItem);
        }
 
        Double DiscountBill = entity.getDiscountBill();
        if (DiscountBill != null) {
            stmt.bindDouble(13, DiscountBill);
        }
 
        Double DiscountOther = entity.getDiscountOther();
        if (DiscountOther != null) {
            stmt.bindDouble(14, DiscountOther);
        }
 
        Double TotalDiscount = entity.getTotalDiscount();
        if (TotalDiscount != null) {
            stmt.bindDouble(15, TotalDiscount);
        }
 
        Integer TransactionStatusID = entity.getTransactionStatusID();
        if (TransactionStatusID != null) {
            stmt.bindLong(16, TransactionStatusID);
        }
 
        Integer SaleMode = entity.getSaleMode();
        if (SaleMode != null) {
            stmt.bindLong(17, SaleMode);
        }
 
        String TransactionName = entity.getTransactionName();
        if (TransactionName != null) {
            stmt.bindString(18, TransactionName);
        }
 
        String QueueName = entity.getQueueName();
        if (QueueName != null) {
            stmt.bindString(19, QueueName);
        }
 
        Integer NoCustomer = entity.getNoCustomer();
        if (NoCustomer != null) {
            stmt.bindLong(20, NoCustomer);
        }
 
        Integer NoCustomerWhenOpen = entity.getNoCustomerWhenOpen();
        if (NoCustomerWhenOpen != null) {
            stmt.bindLong(21, NoCustomerWhenOpen);
        }
 
        Integer DocType = entity.getDocType();
        if (DocType != null) {
            stmt.bindLong(22, DocType);
        }
 
        Integer ReceiptYear = entity.getReceiptYear();
        if (ReceiptYear != null) {
            stmt.bindLong(23, ReceiptYear);
        }
 
        Integer ReceiptMonth = entity.getReceiptMonth();
        if (ReceiptMonth != null) {
            stmt.bindLong(24, ReceiptMonth);
        }
 
        Integer ReceiptID = entity.getReceiptID();
        if (ReceiptID != null) {
            stmt.bindLong(25, ReceiptID);
        }
 
        String ReceiptNumber = entity.getReceiptNumber();
        if (ReceiptNumber != null) {
            stmt.bindString(26, ReceiptNumber);
        }
 
        java.util.Date SaleDate = entity.getSaleDate();
        if (SaleDate != null) {
            stmt.bindLong(27, SaleDate.getTime());
        }
 
        Integer ShopID = entity.getShopID();
        if (ShopID != null) {
            stmt.bindLong(28, ShopID);
        }
 
        Double TransactionVAT = entity.getTransactionVAT();
        if (TransactionVAT != null) {
            stmt.bindDouble(29, TransactionVAT);
        }
 
        Double TransactionVATable = entity.getTransactionVATable();
        if (TransactionVATable != null) {
            stmt.bindDouble(30, TransactionVATable);
        }
 
        Double TranBeforeVAT = entity.getTranBeforeVAT();
        if (TranBeforeVAT != null) {
            stmt.bindDouble(31, TranBeforeVAT);
        }
 
        String VATCode = entity.getVATCode();
        if (VATCode != null) {
            stmt.bindString(32, VATCode);
        }
 
        Double VATPercent = entity.getVATPercent();
        if (VATPercent != null) {
            stmt.bindDouble(33, VATPercent);
        }
 
        Double ServiceChargePercent = entity.getServiceChargePercent();
        if (ServiceChargePercent != null) {
            stmt.bindDouble(34, ServiceChargePercent);
        }
 
        Double ServiceCharge = entity.getServiceCharge();
        if (ServiceCharge != null) {
            stmt.bindDouble(35, ServiceCharge);
        }
 
        Double ServiceChargeVAT = entity.getServiceChargeVAT();
        if (ServiceChargeVAT != null) {
            stmt.bindDouble(36, ServiceChargeVAT);
        }
 
        Double SCBeforeVAT = entity.getSCBeforeVAT();
        if (SCBeforeVAT != null) {
            stmt.bindDouble(37, SCBeforeVAT);
        }
 
        Double OtherIncome = entity.getOtherIncome();
        if (OtherIncome != null) {
            stmt.bindDouble(38, OtherIncome);
        }
 
        Double OtherIncomeVAT = entity.getOtherIncomeVAT();
        if (OtherIncomeVAT != null) {
            stmt.bindDouble(39, OtherIncomeVAT);
        }
 
        Double OhterIncomeBeforeVAT = entity.getOhterIncomeBeforeVAT();
        if (OhterIncomeBeforeVAT != null) {
            stmt.bindDouble(40, OhterIncomeBeforeVAT);
        }
 
        Double ReceiptTotalQty = entity.getReceiptTotalQty();
        if (ReceiptTotalQty != null) {
            stmt.bindDouble(41, ReceiptTotalQty);
        }
 
        Double ReceiptRetailPrice = entity.getReceiptRetailPrice();
        if (ReceiptRetailPrice != null) {
            stmt.bindDouble(42, ReceiptRetailPrice);
        }
 
        Double ReceiptDiscount = entity.getReceiptDiscount();
        if (ReceiptDiscount != null) {
            stmt.bindDouble(43, ReceiptDiscount);
        }
 
        Double ReceiptSalePrice = entity.getReceiptSalePrice();
        if (ReceiptSalePrice != null) {
            stmt.bindDouble(44, ReceiptSalePrice);
        }
 
        Double ReceiptNetSale = entity.getReceiptNetSale();
        if (ReceiptNetSale != null) {
            stmt.bindDouble(45, ReceiptNetSale);
        }
 
        Double ReceiptPayPrice = entity.getReceiptPayPrice();
        if (ReceiptPayPrice != null) {
            stmt.bindDouble(46, ReceiptPayPrice);
        }
 
        Double ReceiptRoundingBill = entity.getReceiptRoundingBill();
        if (ReceiptRoundingBill != null) {
            stmt.bindDouble(47, ReceiptRoundingBill);
        }
 
        Integer SessionID = entity.getSessionID();
        if (SessionID != null) {
            stmt.bindLong(48, SessionID);
        }
 
        Integer CloseComputerID = entity.getCloseComputerID();
        if (CloseComputerID != null) {
            stmt.bindLong(49, CloseComputerID);
        }
 
        Integer VoidStaffID = entity.getVoidStaffID();
        if (VoidStaffID != null) {
            stmt.bindLong(50, VoidStaffID);
        }
 
        String VoidReason = entity.getVoidReason();
        if (VoidReason != null) {
            stmt.bindString(51, VoidReason);
        }
 
        java.util.Date VoidTime = entity.getVoidTime();
        if (VoidTime != null) {
            stmt.bindLong(52, VoidTime.getTime());
        }
 
        Integer IsCloneBill = entity.getIsCloneBill();
        if (IsCloneBill != null) {
            stmt.bindLong(53, IsCloneBill);
        }
 
        Integer VoidTranID = entity.getVoidTranID();
        if (VoidTranID != null) {
            stmt.bindLong(54, VoidTranID);
        }
 
        Integer VoidComID = entity.getVoidComID();
        if (VoidComID != null) {
            stmt.bindLong(55, VoidComID);
        }
 
        Double DiffCloneBill = entity.getDiffCloneBill();
        if (DiffCloneBill != null) {
            stmt.bindDouble(56, DiffCloneBill);
        }
 
        Integer MemberID = entity.getMemberID();
        if (MemberID != null) {
            stmt.bindLong(57, MemberID);
        }
 
        Integer HasOrder = entity.getHasOrder();
        if (HasOrder != null) {
            stmt.bindLong(58, HasOrder);
        }
 
        Integer NoPrintBillDetail = entity.getNoPrintBillDetail();
        if (NoPrintBillDetail != null) {
            stmt.bindLong(59, NoPrintBillDetail);
        }
 
        Double DiffPayCheckBill = entity.getDiffPayCheckBill();
        if (DiffPayCheckBill != null) {
            stmt.bindDouble(60, DiffPayCheckBill);
        }
 
        String BillDetailReferenceNo = entity.getBillDetailReferenceNo();
        if (BillDetailReferenceNo != null) {
            stmt.bindString(61, BillDetailReferenceNo);
        }
 
        Integer CallForCheckBill = entity.getCallForCheckBill();
        if (CallForCheckBill != null) {
            stmt.bindLong(62, CallForCheckBill);
        }
 
        String TransactionNote = entity.getTransactionNote();
        if (TransactionNote != null) {
            stmt.bindString(63, TransactionNote);
        }
 
        Integer CurrentAccessComputer = entity.getCurrentAccessComputer();
        if (CurrentAccessComputer != null) {
            stmt.bindLong(64, CurrentAccessComputer);
        }
 
        java.util.Date UpdateDate = entity.getUpdateDate();
        if (UpdateDate != null) {
            stmt.bindLong(65, UpdateDate.getTime());
        }
 
        java.util.Date BeginTime = entity.getBeginTime();
        if (BeginTime != null) {
            stmt.bindLong(66, BeginTime.getTime());
        }
 
        java.util.Date EndTime = entity.getEndTime();
        if (EndTime != null) {
            stmt.bindLong(67, EndTime.getTime());
        }
 
        java.util.Date PrintWarningTime = entity.getPrintWarningTime();
        if (PrintWarningTime != null) {
            stmt.bindLong(68, PrintWarningTime.getTime());
        }
 
        java.util.Date PrintBeginTime = entity.getPrintBeginTime();
        if (PrintBeginTime != null) {
            stmt.bindLong(69, PrintBeginTime.getTime());
        }
 
        Integer AlreadyCalculateStock = entity.getAlreadyCalculateStock();
        if (AlreadyCalculateStock != null) {
            stmt.bindLong(70, AlreadyCalculateStock);
        }
 
        Integer AlreadyExportToHQ = entity.getAlreadyExportToHQ();
        if (AlreadyExportToHQ != null) {
            stmt.bindLong(71, AlreadyExportToHQ);
        }
 
        Integer TableID = entity.getTableID();
        if (TableID != null) {
            stmt.bindLong(72, TableID);
        }
 
        Integer IsSplitTransaction = entity.getIsSplitTransaction();
        if (IsSplitTransaction != null) {
            stmt.bindLong(73, IsSplitTransaction);
        }
 
        Integer IsFromOtherTransaction = entity.getIsFromOtherTransaction();
        if (IsFromOtherTransaction != null) {
            stmt.bindLong(74, IsFromOtherTransaction);
        }
 
        String ReferenceNo = entity.getReferenceNo();
        if (ReferenceNo != null) {
            stmt.bindString(75, ReferenceNo);
        }
 
        Integer FromDepositTransactionID = entity.getFromDepositTransactionID();
        if (FromDepositTransactionID != null) {
            stmt.bindLong(76, FromDepositTransactionID);
        }
 
        Integer FromDepositComputerID = entity.getFromDepositComputerID();
        if (FromDepositComputerID != null) {
            stmt.bindLong(77, FromDepositComputerID);
        }
 
        Integer Deleted = entity.getDeleted();
        if (Deleted != null) {
            stmt.bindLong(78, Deleted);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public OrderTransaction readEntity(Cursor cursor, int offset) {
        OrderTransaction entity = new OrderTransaction( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // TransactionID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // ComputerID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // TransactionUUID
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // ReserveTime
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // ReserveStaffID
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // OpenTime
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // OpenStaffID
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // PaidTime
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // PaidStaffID
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // CloseTime
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // CommStaffID
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // DiscountItem
            cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // DiscountBill
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // DiscountOther
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // TotalDiscount
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // TransactionStatusID
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // SaleMode
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // TransactionName
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // QueueName
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // NoCustomer
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // NoCustomerWhenOpen
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // DocType
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // ReceiptYear
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // ReceiptMonth
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // ReceiptID
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // ReceiptNumber
            cursor.isNull(offset + 26) ? null : new java.util.Date(cursor.getLong(offset + 26)), // SaleDate
            cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27), // ShopID
            cursor.isNull(offset + 28) ? null : cursor.getDouble(offset + 28), // TransactionVAT
            cursor.isNull(offset + 29) ? null : cursor.getDouble(offset + 29), // TransactionVATable
            cursor.isNull(offset + 30) ? null : cursor.getDouble(offset + 30), // TranBeforeVAT
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // VATCode
            cursor.isNull(offset + 32) ? null : cursor.getDouble(offset + 32), // VATPercent
            cursor.isNull(offset + 33) ? null : cursor.getDouble(offset + 33), // ServiceChargePercent
            cursor.isNull(offset + 34) ? null : cursor.getDouble(offset + 34), // ServiceCharge
            cursor.isNull(offset + 35) ? null : cursor.getDouble(offset + 35), // ServiceChargeVAT
            cursor.isNull(offset + 36) ? null : cursor.getDouble(offset + 36), // SCBeforeVAT
            cursor.isNull(offset + 37) ? null : cursor.getDouble(offset + 37), // OtherIncome
            cursor.isNull(offset + 38) ? null : cursor.getDouble(offset + 38), // OtherIncomeVAT
            cursor.isNull(offset + 39) ? null : cursor.getDouble(offset + 39), // OhterIncomeBeforeVAT
            cursor.isNull(offset + 40) ? null : cursor.getDouble(offset + 40), // ReceiptTotalQty
            cursor.isNull(offset + 41) ? null : cursor.getDouble(offset + 41), // ReceiptRetailPrice
            cursor.isNull(offset + 42) ? null : cursor.getDouble(offset + 42), // ReceiptDiscount
            cursor.isNull(offset + 43) ? null : cursor.getDouble(offset + 43), // ReceiptSalePrice
            cursor.isNull(offset + 44) ? null : cursor.getDouble(offset + 44), // ReceiptNetSale
            cursor.isNull(offset + 45) ? null : cursor.getDouble(offset + 45), // ReceiptPayPrice
            cursor.isNull(offset + 46) ? null : cursor.getDouble(offset + 46), // ReceiptRoundingBill
            cursor.isNull(offset + 47) ? null : cursor.getInt(offset + 47), // SessionID
            cursor.isNull(offset + 48) ? null : cursor.getInt(offset + 48), // CloseComputerID
            cursor.isNull(offset + 49) ? null : cursor.getInt(offset + 49), // VoidStaffID
            cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50), // VoidReason
            cursor.isNull(offset + 51) ? null : new java.util.Date(cursor.getLong(offset + 51)), // VoidTime
            cursor.isNull(offset + 52) ? null : cursor.getInt(offset + 52), // IsCloneBill
            cursor.isNull(offset + 53) ? null : cursor.getInt(offset + 53), // VoidTranID
            cursor.isNull(offset + 54) ? null : cursor.getInt(offset + 54), // VoidComID
            cursor.isNull(offset + 55) ? null : cursor.getDouble(offset + 55), // DiffCloneBill
            cursor.isNull(offset + 56) ? null : cursor.getInt(offset + 56), // MemberID
            cursor.isNull(offset + 57) ? null : cursor.getInt(offset + 57), // HasOrder
            cursor.isNull(offset + 58) ? null : cursor.getInt(offset + 58), // NoPrintBillDetail
            cursor.isNull(offset + 59) ? null : cursor.getDouble(offset + 59), // DiffPayCheckBill
            cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60), // BillDetailReferenceNo
            cursor.isNull(offset + 61) ? null : cursor.getInt(offset + 61), // CallForCheckBill
            cursor.isNull(offset + 62) ? null : cursor.getString(offset + 62), // TransactionNote
            cursor.isNull(offset + 63) ? null : cursor.getInt(offset + 63), // CurrentAccessComputer
            cursor.isNull(offset + 64) ? null : new java.util.Date(cursor.getLong(offset + 64)), // UpdateDate
            cursor.isNull(offset + 65) ? null : new java.util.Date(cursor.getLong(offset + 65)), // BeginTime
            cursor.isNull(offset + 66) ? null : new java.util.Date(cursor.getLong(offset + 66)), // EndTime
            cursor.isNull(offset + 67) ? null : new java.util.Date(cursor.getLong(offset + 67)), // PrintWarningTime
            cursor.isNull(offset + 68) ? null : new java.util.Date(cursor.getLong(offset + 68)), // PrintBeginTime
            cursor.isNull(offset + 69) ? null : cursor.getInt(offset + 69), // AlreadyCalculateStock
            cursor.isNull(offset + 70) ? null : cursor.getInt(offset + 70), // AlreadyExportToHQ
            cursor.isNull(offset + 71) ? null : cursor.getInt(offset + 71), // TableID
            cursor.isNull(offset + 72) ? null : cursor.getInt(offset + 72), // IsSplitTransaction
            cursor.isNull(offset + 73) ? null : cursor.getInt(offset + 73), // IsFromOtherTransaction
            cursor.isNull(offset + 74) ? null : cursor.getString(offset + 74), // ReferenceNo
            cursor.isNull(offset + 75) ? null : cursor.getInt(offset + 75), // FromDepositTransactionID
            cursor.isNull(offset + 76) ? null : cursor.getInt(offset + 76), // FromDepositComputerID
            cursor.isNull(offset + 77) ? null : cursor.getInt(offset + 77) // Deleted
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OrderTransaction entity, int offset) {
        entity.setTransactionID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setComputerID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setTransactionUUID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setReserveTime(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setReserveStaffID(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setOpenTime(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setOpenStaffID(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setPaidTime(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setPaidStaffID(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setCloseTime(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setCommStaffID(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setDiscountItem(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setDiscountBill(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setDiscountOther(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setTotalDiscount(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setTransactionStatusID(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setSaleMode(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setTransactionName(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setQueueName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setNoCustomer(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setNoCustomerWhenOpen(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setDocType(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setReceiptYear(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setReceiptMonth(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setReceiptID(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setReceiptNumber(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setSaleDate(cursor.isNull(offset + 26) ? null : new java.util.Date(cursor.getLong(offset + 26)));
        entity.setShopID(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
        entity.setTransactionVAT(cursor.isNull(offset + 28) ? null : cursor.getDouble(offset + 28));
        entity.setTransactionVATable(cursor.isNull(offset + 29) ? null : cursor.getDouble(offset + 29));
        entity.setTranBeforeVAT(cursor.isNull(offset + 30) ? null : cursor.getDouble(offset + 30));
        entity.setVATCode(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setVATPercent(cursor.isNull(offset + 32) ? null : cursor.getDouble(offset + 32));
        entity.setServiceChargePercent(cursor.isNull(offset + 33) ? null : cursor.getDouble(offset + 33));
        entity.setServiceCharge(cursor.isNull(offset + 34) ? null : cursor.getDouble(offset + 34));
        entity.setServiceChargeVAT(cursor.isNull(offset + 35) ? null : cursor.getDouble(offset + 35));
        entity.setSCBeforeVAT(cursor.isNull(offset + 36) ? null : cursor.getDouble(offset + 36));
        entity.setOtherIncome(cursor.isNull(offset + 37) ? null : cursor.getDouble(offset + 37));
        entity.setOtherIncomeVAT(cursor.isNull(offset + 38) ? null : cursor.getDouble(offset + 38));
        entity.setOhterIncomeBeforeVAT(cursor.isNull(offset + 39) ? null : cursor.getDouble(offset + 39));
        entity.setReceiptTotalQty(cursor.isNull(offset + 40) ? null : cursor.getDouble(offset + 40));
        entity.setReceiptRetailPrice(cursor.isNull(offset + 41) ? null : cursor.getDouble(offset + 41));
        entity.setReceiptDiscount(cursor.isNull(offset + 42) ? null : cursor.getDouble(offset + 42));
        entity.setReceiptSalePrice(cursor.isNull(offset + 43) ? null : cursor.getDouble(offset + 43));
        entity.setReceiptNetSale(cursor.isNull(offset + 44) ? null : cursor.getDouble(offset + 44));
        entity.setReceiptPayPrice(cursor.isNull(offset + 45) ? null : cursor.getDouble(offset + 45));
        entity.setReceiptRoundingBill(cursor.isNull(offset + 46) ? null : cursor.getDouble(offset + 46));
        entity.setSessionID(cursor.isNull(offset + 47) ? null : cursor.getInt(offset + 47));
        entity.setCloseComputerID(cursor.isNull(offset + 48) ? null : cursor.getInt(offset + 48));
        entity.setVoidStaffID(cursor.isNull(offset + 49) ? null : cursor.getInt(offset + 49));
        entity.setVoidReason(cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50));
        entity.setVoidTime(cursor.isNull(offset + 51) ? null : new java.util.Date(cursor.getLong(offset + 51)));
        entity.setIsCloneBill(cursor.isNull(offset + 52) ? null : cursor.getInt(offset + 52));
        entity.setVoidTranID(cursor.isNull(offset + 53) ? null : cursor.getInt(offset + 53));
        entity.setVoidComID(cursor.isNull(offset + 54) ? null : cursor.getInt(offset + 54));
        entity.setDiffCloneBill(cursor.isNull(offset + 55) ? null : cursor.getDouble(offset + 55));
        entity.setMemberID(cursor.isNull(offset + 56) ? null : cursor.getInt(offset + 56));
        entity.setHasOrder(cursor.isNull(offset + 57) ? null : cursor.getInt(offset + 57));
        entity.setNoPrintBillDetail(cursor.isNull(offset + 58) ? null : cursor.getInt(offset + 58));
        entity.setDiffPayCheckBill(cursor.isNull(offset + 59) ? null : cursor.getDouble(offset + 59));
        entity.setBillDetailReferenceNo(cursor.isNull(offset + 60) ? null : cursor.getString(offset + 60));
        entity.setCallForCheckBill(cursor.isNull(offset + 61) ? null : cursor.getInt(offset + 61));
        entity.setTransactionNote(cursor.isNull(offset + 62) ? null : cursor.getString(offset + 62));
        entity.setCurrentAccessComputer(cursor.isNull(offset + 63) ? null : cursor.getInt(offset + 63));
        entity.setUpdateDate(cursor.isNull(offset + 64) ? null : new java.util.Date(cursor.getLong(offset + 64)));
        entity.setBeginTime(cursor.isNull(offset + 65) ? null : new java.util.Date(cursor.getLong(offset + 65)));
        entity.setEndTime(cursor.isNull(offset + 66) ? null : new java.util.Date(cursor.getLong(offset + 66)));
        entity.setPrintWarningTime(cursor.isNull(offset + 67) ? null : new java.util.Date(cursor.getLong(offset + 67)));
        entity.setPrintBeginTime(cursor.isNull(offset + 68) ? null : new java.util.Date(cursor.getLong(offset + 68)));
        entity.setAlreadyCalculateStock(cursor.isNull(offset + 69) ? null : cursor.getInt(offset + 69));
        entity.setAlreadyExportToHQ(cursor.isNull(offset + 70) ? null : cursor.getInt(offset + 70));
        entity.setTableID(cursor.isNull(offset + 71) ? null : cursor.getInt(offset + 71));
        entity.setIsSplitTransaction(cursor.isNull(offset + 72) ? null : cursor.getInt(offset + 72));
        entity.setIsFromOtherTransaction(cursor.isNull(offset + 73) ? null : cursor.getInt(offset + 73));
        entity.setReferenceNo(cursor.isNull(offset + 74) ? null : cursor.getString(offset + 74));
        entity.setFromDepositTransactionID(cursor.isNull(offset + 75) ? null : cursor.getInt(offset + 75));
        entity.setFromDepositComputerID(cursor.isNull(offset + 76) ? null : cursor.getInt(offset + 76));
        entity.setDeleted(cursor.isNull(offset + 77) ? null : cursor.getInt(offset + 77));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(OrderTransaction entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(OrderTransaction entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
