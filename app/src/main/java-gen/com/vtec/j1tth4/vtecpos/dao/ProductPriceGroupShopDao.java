package com.vtec.j1tth4.vtecpos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vtec.j1tth4.vtecpos.dao.ProductPriceGroupShop;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PRODUCT_PRICE_GROUP_SHOP.
*/
public class ProductPriceGroupShopDao extends AbstractDao<ProductPriceGroupShop, Integer> {

    public static final String TABLENAME = "PRODUCT_PRICE_GROUP_SHOP";

    /**
     * Properties of entity ProductPriceGroupShop.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PriceGroupID = new Property(0, int.class, "PriceGroupID", true, "PRICE_GROUP_ID");
        public final static Property ShopID = new Property(1, int.class, "ShopID", false, "SHOP_ID");
    };


    public ProductPriceGroupShopDao(DaoConfig config) {
        super(config);
    }
    
    public ProductPriceGroupShopDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PRODUCT_PRICE_GROUP_SHOP' (" + //
                "'PRICE_GROUP_ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: PriceGroupID
                "'SHOP_ID' INTEGER NOT NULL );"); // 1: ShopID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PRODUCT_PRICE_GROUP_SHOP'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProductPriceGroupShop entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getPriceGroupID());
        stmt.bindLong(2, entity.getShopID());
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ProductPriceGroupShop readEntity(Cursor cursor, int offset) {
        ProductPriceGroupShop entity = new ProductPriceGroupShop( //
            cursor.getInt(offset + 0), // PriceGroupID
            cursor.getInt(offset + 1) // ShopID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProductPriceGroupShop entity, int offset) {
        entity.setPriceGroupID(cursor.getInt(offset + 0));
        entity.setShopID(cursor.getInt(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(ProductPriceGroupShop entity, long rowId) {
        return entity.getPriceGroupID();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(ProductPriceGroupShop entity) {
        if(entity != null) {
            return entity.getPriceGroupID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
