package com.vtec.j1tth4.vtecpos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vtec.j1tth4.vtecpos.dao.OrderpayDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table OrderpayDetail.
*/
public class OrderpayDetailDao extends AbstractDao<OrderpayDetail, Void> {

    public static final String TABLENAME = "OrderpayDetail";

    /**
     * Properties of entity OrderpayDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PayDetailID = new Property(0, Integer.class, "PayDetailID", true, "PayDetailID");
        public final static Property TransactionID = new Property(1, Integer.class, "TransactionID", true, "TransactionID");
        public final static Property ComputerID = new Property(2, Integer.class, "ComputerID", true, "ComputerID");
        public final static Property PayTypeID = new Property(3, Integer.class, "PayTypeID", false, "PayTypeID");
        public final static Property PayAmount = new Property(4, Double.class, "PayAmount", false, "PayAmount");
        public final static Property CashChange = new Property(5, Double.class, "CashChange", false, "CashChange");
        public final static Property CreditCardNo = new Property(6, String.class, "CreditCardNo", false, "CreditCardNo");
        public final static Property ExpireMonth = new Property(7, Integer.class, "ExpireMonth", false, "ExpireMonth");
        public final static Property ExpireYear = new Property(8, Integer.class, "ExpireYear", false, "ExpireYear");
        public final static Property ChequeNumber = new Property(9, String.class, "ChequeNumber", false, "ChequeNumber");
        public final static Property ChequeDate = new Property(10, String.class, "ChequeDate", false, "ChequeDate");
        public final static Property BankName = new Property(11, String.class, "BankName", false, "BankName");
        public final static Property CreditCardType = new Property(12, Integer.class, "CreditCardType", false, "CreditCardType");
        public final static Property PaidByName = new Property(13, String.class, "PaidByName", false, "PaidByName");
        public final static Property Paid = new Property(14, Double.class, "Paid", false, "Paid");
        public final static Property CardID = new Property(15, Integer.class, "CardID", false, "CardID");
        public final static Property CardNo = new Property(16, String.class, "CardNo", false, "CardNo");
        public final static Property PrepaidDiscountPercent = new Property(17, Double.class, "PrepaidDiscountPercent", false, "PrepaidDiscountPercent");
        public final static Property RevenueRatio = new Property(18, Double.class, "RevenueRatio", false, "RevenueRatio");
        public final static Property IsFromEDC = new Property(19, Integer.class, "IsFromEDC", false, "IsFromEDC");
        public final static Property CurrencyCode = new Property(20, String.class, "CurrencyCode", false, "CurrencyCode");
        public final static Property CurrencyName = new Property(21, String.class, "CurrencyName", false, "CurrencyName");
        public final static Property MainCurrencyRatio = new Property(22, Double.class, "MainCurrencyRatio", false, "MainCurrencyRatio");
        public final static Property CurrencyRatio = new Property(23, Double.class, "CurrencyRatio", false, "CurrencyRatio");
        public final static Property CurrencyAmount = new Property(24, Double.class, "CurrencyAmount", false, "CurrencyAmount");
    };


    public OrderpayDetailDao(DaoConfig config) {
        super(config);
    }
    
    public OrderpayDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OrderpayDetail entity) {
        stmt.clearBindings();
 
        Integer PayDetailID = entity.getPayDetailID();
        if (PayDetailID != null) {
            stmt.bindLong(1, PayDetailID);
        }
 
        Integer TransactionID = entity.getTransactionID();
        if (TransactionID != null) {
            stmt.bindLong(2, TransactionID);
        }
 
        Integer ComputerID = entity.getComputerID();
        if (ComputerID != null) {
            stmt.bindLong(3, ComputerID);
        }
 
        Integer PayTypeID = entity.getPayTypeID();
        if (PayTypeID != null) {
            stmt.bindLong(4, PayTypeID);
        }
 
        Double PayAmount = entity.getPayAmount();
        if (PayAmount != null) {
            stmt.bindDouble(5, PayAmount);
        }
 
        Double CashChange = entity.getCashChange();
        if (CashChange != null) {
            stmt.bindDouble(6, CashChange);
        }
 
        String CreditCardNo = entity.getCreditCardNo();
        if (CreditCardNo != null) {
            stmt.bindString(7, CreditCardNo);
        }
 
        Integer ExpireMonth = entity.getExpireMonth();
        if (ExpireMonth != null) {
            stmt.bindLong(8, ExpireMonth);
        }
 
        Integer ExpireYear = entity.getExpireYear();
        if (ExpireYear != null) {
            stmt.bindLong(9, ExpireYear);
        }
 
        String ChequeNumber = entity.getChequeNumber();
        if (ChequeNumber != null) {
            stmt.bindString(10, ChequeNumber);
        }
 
        String ChequeDate = entity.getChequeDate();
        if (ChequeDate != null) {
            stmt.bindString(11, ChequeDate);
        }
 
        String BankName = entity.getBankName();
        if (BankName != null) {
            stmt.bindString(12, BankName);
        }
 
        Integer CreditCardType = entity.getCreditCardType();
        if (CreditCardType != null) {
            stmt.bindLong(13, CreditCardType);
        }
 
        String PaidByName = entity.getPaidByName();
        if (PaidByName != null) {
            stmt.bindString(14, PaidByName);
        }
 
        Double Paid = entity.getPaid();
        if (Paid != null) {
            stmt.bindDouble(15, Paid);
        }
 
        Integer CardID = entity.getCardID();
        if (CardID != null) {
            stmt.bindLong(16, CardID);
        }
 
        String CardNo = entity.getCardNo();
        if (CardNo != null) {
            stmt.bindString(17, CardNo);
        }
 
        Double PrepaidDiscountPercent = entity.getPrepaidDiscountPercent();
        if (PrepaidDiscountPercent != null) {
            stmt.bindDouble(18, PrepaidDiscountPercent);
        }
 
        Double RevenueRatio = entity.getRevenueRatio();
        if (RevenueRatio != null) {
            stmt.bindDouble(19, RevenueRatio);
        }
 
        Integer IsFromEDC = entity.getIsFromEDC();
        if (IsFromEDC != null) {
            stmt.bindLong(20, IsFromEDC);
        }
 
        String CurrencyCode = entity.getCurrencyCode();
        if (CurrencyCode != null) {
            stmt.bindString(21, CurrencyCode);
        }
 
        String CurrencyName = entity.getCurrencyName();
        if (CurrencyName != null) {
            stmt.bindString(22, CurrencyName);
        }
 
        Double MainCurrencyRatio = entity.getMainCurrencyRatio();
        if (MainCurrencyRatio != null) {
            stmt.bindDouble(23, MainCurrencyRatio);
        }
 
        Double CurrencyRatio = entity.getCurrencyRatio();
        if (CurrencyRatio != null) {
            stmt.bindDouble(24, CurrencyRatio);
        }
 
        Double CurrencyAmount = entity.getCurrencyAmount();
        if (CurrencyAmount != null) {
            stmt.bindDouble(25, CurrencyAmount);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public OrderpayDetail readEntity(Cursor cursor, int offset) {
        OrderpayDetail entity = new OrderpayDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // PayDetailID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // TransactionID
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // ComputerID
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // PayTypeID
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // PayAmount
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // CashChange
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // CreditCardNo
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // ExpireMonth
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // ExpireYear
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ChequeNumber
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ChequeDate
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // BankName
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // CreditCardType
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // PaidByName
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // Paid
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // CardID
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // CardNo
            cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17), // PrepaidDiscountPercent
            cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18), // RevenueRatio
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // IsFromEDC
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // CurrencyCode
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // CurrencyName
            cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22), // MainCurrencyRatio
            cursor.isNull(offset + 23) ? null : cursor.getDouble(offset + 23), // CurrencyRatio
            cursor.isNull(offset + 24) ? null : cursor.getDouble(offset + 24) // CurrencyAmount
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OrderpayDetail entity, int offset) {
        entity.setPayDetailID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setTransactionID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setComputerID(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setPayTypeID(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPayAmount(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setCashChange(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setCreditCardNo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setExpireMonth(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setExpireYear(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setChequeNumber(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setChequeDate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBankName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCreditCardType(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setPaidByName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setPaid(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setCardID(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setCardNo(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setPrepaidDiscountPercent(cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17));
        entity.setRevenueRatio(cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18));
        entity.setIsFromEDC(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setCurrencyCode(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setCurrencyName(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setMainCurrencyRatio(cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22));
        entity.setCurrencyRatio(cursor.isNull(offset + 23) ? null : cursor.getDouble(offset + 23));
        entity.setCurrencyAmount(cursor.isNull(offset + 24) ? null : cursor.getDouble(offset + 24));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(OrderpayDetail entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(OrderpayDetail entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
