package com.vtec.j1tth4.vtecpos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vtec.j1tth4.vtecpos.dao.ProductCategory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PRODUCT_CATEGORY.
*/
public class ProductCategoryDao extends AbstractDao<ProductCategory, Integer> {

    public static final String TABLENAME = "PRODUCT_CATEGORY";

    /**
     * Properties of entity ProductCategory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ProductCatID = new Property(0, int.class, "ProductCatID", true, "PRODUCT_CAT_ID");
        public final static Property ShopID = new Property(1, int.class, "ShopID", false, "SHOP_ID");
        public final static Property ProductCatTypeID = new Property(2, int.class, "ProductCatTypeID", false, "PRODUCT_CAT_TYPE_ID");
        public final static Property ProductCatCode = new Property(3, String.class, "ProductCatCode", false, "PRODUCT_CAT_CODE");
        public final static Property ProductCatName = new Property(4, String.class, "ProductCatName", false, "PRODUCT_CAT_NAME");
        public final static Property ProductCatDisplay = new Property(5, int.class, "ProductCatDisplay", false, "PRODUCT_CAT_DISPLAY");
        public final static Property ProductCatActivate = new Property(6, int.class, "ProductCatActivate", false, "PRODUCT_CAT_ACTIVATE");
        public final static Property ProductCatOrdering = new Property(7, int.class, "ProductCatOrdering", false, "PRODUCT_CAT_ORDERING");
        public final static Property Deleted = new Property(8, int.class, "Deleted", false, "DELETED");
        public final static Property IsComment = new Property(9, int.class, "IsComment", false, "IS_COMMENT");
        public final static Property AddingFromBranch = new Property(10, int.class, "AddingFromBranch", false, "ADDING_FROM_BRANCH");
    };


    public ProductCategoryDao(DaoConfig config) {
        super(config);
    }
    
    public ProductCategoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProductCategory entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getProductCatID());
        stmt.bindLong(2, entity.getShopID());
        stmt.bindLong(3, entity.getProductCatTypeID());
 
        String ProductCatCode = entity.getProductCatCode();
        if (ProductCatCode != null) {
            stmt.bindString(4, ProductCatCode);
        }
 
        String ProductCatName = entity.getProductCatName();
        if (ProductCatName != null) {
            stmt.bindString(5, ProductCatName);
        }
        stmt.bindLong(6, entity.getProductCatDisplay());
        stmt.bindLong(7, entity.getProductCatActivate());
        stmt.bindLong(8, entity.getProductCatOrdering());
        stmt.bindLong(9, entity.getDeleted());
        stmt.bindLong(10, entity.getIsComment());
        stmt.bindLong(11, entity.getAddingFromBranch());
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ProductCategory readEntity(Cursor cursor, int offset) {
        ProductCategory entity = new ProductCategory( //
            cursor.getInt(offset + 0), // ProductCatID
            cursor.getInt(offset + 1), // ShopID
            cursor.getInt(offset + 2), // ProductCatTypeID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ProductCatCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ProductCatName
            cursor.getInt(offset + 5), // ProductCatDisplay
            cursor.getInt(offset + 6), // ProductCatActivate
            cursor.getInt(offset + 7), // ProductCatOrdering
            cursor.getInt(offset + 8), // Deleted
            cursor.getInt(offset + 9), // IsComment
            cursor.getInt(offset + 10) // AddingFromBranch
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProductCategory entity, int offset) {
        entity.setProductCatID(cursor.getInt(offset + 0));
        entity.setShopID(cursor.getInt(offset + 1));
        entity.setProductCatTypeID(cursor.getInt(offset + 2));
        entity.setProductCatCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProductCatName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProductCatDisplay(cursor.getInt(offset + 5));
        entity.setProductCatActivate(cursor.getInt(offset + 6));
        entity.setProductCatOrdering(cursor.getInt(offset + 7));
        entity.setDeleted(cursor.getInt(offset + 8));
        entity.setIsComment(cursor.getInt(offset + 9));
        entity.setAddingFromBranch(cursor.getInt(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(ProductCategory entity, long rowId) {
        return entity.getProductCatID();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(ProductCategory entity) {
        if(entity != null) {
            return entity.getProductCatID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
