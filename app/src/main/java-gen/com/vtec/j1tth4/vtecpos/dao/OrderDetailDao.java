package com.vtec.j1tth4.vtecpos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vtec.j1tth4.vtecpos.dao.OrderDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table OrderDetail.
*/
public class OrderDetailDao extends AbstractDao<OrderDetail, Void> {

    public static final String TABLENAME = "OrderDetail";

    /**
     * Properties of entity OrderDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property OrderDetailID = new Property(0, Integer.class, "OrderDetailID", true, "OrderDetailID");
        public final static Property TransactionID = new Property(1, Integer.class, "TransactionID", true, "TransactionID");
        public final static Property ComputerID = new Property(2, Integer.class, "ComputerID", true, "ComputerID");
        public final static Property ComponentLevel = new Property(3, Integer.class, "ComponentLevel", false, "ComponentLevel");
        public final static Property OrderDetailLinkID = new Property(4, Integer.class, "OrderDetailLinkID", false, "OrderDetailLinkID");
        public final static Property InsertOrderNo = new Property(5, Integer.class, "InsertOrderNo", false, "InsertOrderNo");
        public final static Property IndentLevel = new Property(6, Integer.class, "IndentLevel", false, "IndentLevel");
        public final static Property DisplayOrdering = new Property(7, Integer.class, "DisplayOrdering", false, "DisplayOrdering");
        public final static Property SaleDate = new Property(8, java.util.Date.class, "SaleDate", false, "SaleDate");
        public final static Property ShopID = new Property(9, Integer.class, "ShopID", false, "ShopID");
        public final static Property ProductID = new Property(10, Integer.class, "ProductID", false, "ProductID");
        public final static Property ProductSetType = new Property(11, Integer.class, "ProductSetType", false, "ProductSetType");
        public final static Property OrderStatusID = new Property(12, Integer.class, "OrderStatusID", false, "OrderStatusID");
        public final static Property SaleMode = new Property(13, Integer.class, "SaleMode", false, "SaleMode");
        public final static Property TotalQty = new Property(14, Double.class, "TotalQty", false, "TotalQty");
        public final static Property PricePerUnit = new Property(15, Double.class, "PricePerUnit", false, "PricePerUnit");
        public final static Property TotalRetailPrice = new Property(16, Double.class, "TotalRetailPrice", false, "TotalRetailPrice");
        public final static Property OrgPricePerUnit = new Property(17, Double.class, "OrgPricePerUnit", false, "OrgPricePerUnit");
        public final static Property OrgTotalRetailPrice = new Property(18, Double.class, "OrgTotalRetailPrice", false, "OrgTotalRetailPrice");
        public final static Property DiscPrice = new Property(19, Double.class, "DiscPrice", false, "DiscPrice");
        public final static Property DiscPercent = new Property(20, Double.class, "DiscPercent", false, "DiscPercent");
        public final static Property DiscAmount = new Property(21, Double.class, "DiscAmount", false, "DiscAmount");
        public final static Property DiscOtherPercent = new Property(22, Double.class, "DiscOtherPercent", false, "DiscOtherPercent");
        public final static Property DiscOther = new Property(23, Double.class, "DiscOther", false, "DiscOther");
        public final static Property TotalItemDisc = new Property(24, Double.class, "TotalItemDisc", false, "TotalItemDisc");
        public final static Property SalePrice = new Property(25, Double.class, "SalePrice", false, "SalePrice");
        public final static Property DiscBill = new Property(26, Double.class, "DiscBill", false, "DiscBill");
        public final static Property TotalDiscount = new Property(27, Double.class, "TotalDiscount", false, "TotalDiscount");
        public final static Property NetSale = new Property(28, Double.class, "NetSale", false, "NetSale");
        public final static Property Vatable = new Property(29, Double.class, "Vatable", false, "Vatable");
        public final static Property ProductVATCode = new Property(30, String.class, "ProductVATCode", false, "ProductVATCode");
        public final static Property VATDisplay = new Property(31, String.class, "VATDisplay", false, "VATDisplay");
        public final static Property ProductVATPercent = new Property(32, Double.class, "ProductVATPercent", false, "ProductVATPercent");
        public final static Property ProductVAT = new Property(33, Double.class, "ProductVAT", false, "ProductVAT");
        public final static Property ProductBeforeVAT = new Property(34, Double.class, "ProductBeforeVAT", false, "ProductBeforeVAT");
        public final static Property TotalRetailVAT = new Property(35, Double.class, "TotalRetailVAT", false, "TotalRetailVAT");
        public final static Property DiscVAT = new Property(36, Double.class, "DiscVAT", false, "DiscVAT");
        public final static Property IsSCBeforeDisc = new Property(37, Integer.class, "IsSCBeforeDisc", false, "IsSCBeforeDisc");
        public final static Property HasServiceCharge = new Property(38, Integer.class, "HasServiceCharge", false, "HasServiceCharge");
        public final static Property SCPercent = new Property(39, Double.class, "SCPercent", false, "SCPercent");
        public final static Property SCAmount = new Property(40, Double.class, "SCAmount", false, "SCAmount");
        public final static Property SCVAT = new Property(41, Double.class, "SCVAT", false, "SCVAT");
        public final static Property SCBeforeVAT = new Property(42, Double.class, "SCBeforeVAT", false, "SCBeforeVAT");
        public final static Property WVatable = new Property(43, Double.class, "WVatable", false, "WVatable");
        public final static Property SCWAmount = new Property(44, Double.class, "SCWAmount", false, "SCWAmount");
        public final static Property SCWVAT = new Property(45, Double.class, "SCWVAT", false, "SCWVAT");
        public final static Property SCWBeforeVAT = new Property(46, Double.class, "SCWBeforeVAT", false, "SCWBeforeVAT");
        public final static Property WeightPrice = new Property(47, Double.class, "WeightPrice", false, "WeightPrice");
        public final static Property WeightPriceVAT = new Property(48, Double.class, "WeightPriceVAT", false, "WeightPriceVAT");
        public final static Property WeightBeforeVAT = new Property(49, Double.class, "WeightBeforeVAT", false, "WeightBeforeVAT");
        public final static Property OtherFoodName = new Property(50, String.class, "OtherFoodName", false, "OtherFoodName");
        public final static Property OtherProductGroupID = new Property(51, Integer.class, "OtherProductGroupID", false, "OtherProductGroupID");
        public final static Property DiscountAllow = new Property(52, Integer.class, "DiscountAllow", false, "DiscountAllow");
        public final static Property ItemDiscAllow = new Property(53, Integer.class, "ItemDiscAllow", false, "ItemDiscAllow");
        public final static Property LastTransactionID = new Property(54, Integer.class, "LastTransactionID", false, "LastTransactionID");
        public final static Property LastComputerID = new Property(55, Integer.class, "LastComputerID", false, "LastComputerID");
        public final static Property PrinterID = new Property(56, Integer.class, "PrinterID", false, "PrinterID");
        public final static Property InventoryID = new Property(57, Integer.class, "InventoryID", false, "InventoryID");
        public final static Property OrderStaffID = new Property(58, Integer.class, "OrderStaffID", false, "OrderStaffID");
        public final static Property OrderComputerID = new Property(59, Integer.class, "OrderComputerID", false, "OrderComputerID");
        public final static Property OrderTableID = new Property(60, Integer.class, "OrderTableID", false, "OrderTableID");
        public final static Property VoidTypeID = new Property(61, Integer.class, "VoidTypeID", false, "VoidTypeID");
        public final static Property VoidStaffID = new Property(62, Integer.class, "VoidStaffID", false, "VoidStaffID");
        public final static Property VoidDateTime = new Property(63, java.util.Date.class, "VoidDateTime", false, "VoidDateTime");
        public final static Property VATType = new Property(64, Integer.class, "VATType", false, "VATType");
        public final static Property PrintGroup = new Property(65, Integer.class, "PrintGroup", false, "PrintGroup");
        public final static Property NoPrintBill = new Property(66, Integer.class, "NoPrintBill", false, "NoPrintBill");
        public final static Property NoRePrintOrder = new Property(67, Integer.class, "NoRePrintOrder", false, "NoRePrintOrder");
        public final static Property StartTime = new Property(68, java.util.Date.class, "StartTime", false, "StartTime");
        public final static Property FinishTime = new Property(69, java.util.Date.class, "FinishTime", false, "FinishTime");
        public final static Property PrintStatus = new Property(70, Integer.class, "PrintStatus", false, "PrintStatus");
        public final static Property ProcessID = new Property(71, Integer.class, "ProcessID", false, "ProcessID");
        public final static Property SubmitOrderDateTime = new Property(72, java.util.Date.class, "SubmitOrderDateTime", false, "SubmitOrderDateTime");
        public final static Property Comment = new Property(73, String.class, "Comment", false, "Comment");
        public final static Property IsComment = new Property(74, Integer.class, "IsComment", false, "IsComment");
        public final static Property Deleted = new Property(75, Integer.class, "Deleted", false, "Deleted");
    };


    public OrderDetailDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OrderDetail entity) {
        stmt.clearBindings();
 
        Integer OrderDetailID = entity.getOrderDetailID();
        if (OrderDetailID != null) {
            stmt.bindLong(1, OrderDetailID);
        }
 
        Integer TransactionID = entity.getTransactionID();
        if (TransactionID != null) {
            stmt.bindLong(2, TransactionID);
        }
 
        Integer ComputerID = entity.getComputerID();
        if (ComputerID != null) {
            stmt.bindLong(3, ComputerID);
        }
 
        Integer ComponentLevel = entity.getComponentLevel();
        if (ComponentLevel != null) {
            stmt.bindLong(4, ComponentLevel);
        }
 
        Integer OrderDetailLinkID = entity.getOrderDetailLinkID();
        if (OrderDetailLinkID != null) {
            stmt.bindLong(5, OrderDetailLinkID);
        }
 
        Integer InsertOrderNo = entity.getInsertOrderNo();
        if (InsertOrderNo != null) {
            stmt.bindLong(6, InsertOrderNo);
        }
 
        Integer IndentLevel = entity.getIndentLevel();
        if (IndentLevel != null) {
            stmt.bindLong(7, IndentLevel);
        }
 
        Integer DisplayOrdering = entity.getDisplayOrdering();
        if (DisplayOrdering != null) {
            stmt.bindLong(8, DisplayOrdering);
        }
 
        java.util.Date SaleDate = entity.getSaleDate();
        if (SaleDate != null) {
            stmt.bindLong(9, SaleDate.getTime());
        }
 
        Integer ShopID = entity.getShopID();
        if (ShopID != null) {
            stmt.bindLong(10, ShopID);
        }
 
        Integer ProductID = entity.getProductID();
        if (ProductID != null) {
            stmt.bindLong(11, ProductID);
        }
 
        Integer ProductSetType = entity.getProductSetType();
        if (ProductSetType != null) {
            stmt.bindLong(12, ProductSetType);
        }
 
        Integer OrderStatusID = entity.getOrderStatusID();
        if (OrderStatusID != null) {
            stmt.bindLong(13, OrderStatusID);
        }
 
        Integer SaleMode = entity.getSaleMode();
        if (SaleMode != null) {
            stmt.bindLong(14, SaleMode);
        }
 
        Double TotalQty = entity.getTotalQty();
        if (TotalQty != null) {
            stmt.bindDouble(15, TotalQty);
        }
 
        Double PricePerUnit = entity.getPricePerUnit();
        if (PricePerUnit != null) {
            stmt.bindDouble(16, PricePerUnit);
        }
 
        Double TotalRetailPrice = entity.getTotalRetailPrice();
        if (TotalRetailPrice != null) {
            stmt.bindDouble(17, TotalRetailPrice);
        }
 
        Double OrgPricePerUnit = entity.getOrgPricePerUnit();
        if (OrgPricePerUnit != null) {
            stmt.bindDouble(18, OrgPricePerUnit);
        }
 
        Double OrgTotalRetailPrice = entity.getOrgTotalRetailPrice();
        if (OrgTotalRetailPrice != null) {
            stmt.bindDouble(19, OrgTotalRetailPrice);
        }
 
        Double DiscPrice = entity.getDiscPrice();
        if (DiscPrice != null) {
            stmt.bindDouble(20, DiscPrice);
        }
 
        Double DiscPercent = entity.getDiscPercent();
        if (DiscPercent != null) {
            stmt.bindDouble(21, DiscPercent);
        }
 
        Double DiscAmount = entity.getDiscAmount();
        if (DiscAmount != null) {
            stmt.bindDouble(22, DiscAmount);
        }
 
        Double DiscOtherPercent = entity.getDiscOtherPercent();
        if (DiscOtherPercent != null) {
            stmt.bindDouble(23, DiscOtherPercent);
        }
 
        Double DiscOther = entity.getDiscOther();
        if (DiscOther != null) {
            stmt.bindDouble(24, DiscOther);
        }
 
        Double TotalItemDisc = entity.getTotalItemDisc();
        if (TotalItemDisc != null) {
            stmt.bindDouble(25, TotalItemDisc);
        }
 
        Double SalePrice = entity.getSalePrice();
        if (SalePrice != null) {
            stmt.bindDouble(26, SalePrice);
        }
 
        Double DiscBill = entity.getDiscBill();
        if (DiscBill != null) {
            stmt.bindDouble(27, DiscBill);
        }
 
        Double TotalDiscount = entity.getTotalDiscount();
        if (TotalDiscount != null) {
            stmt.bindDouble(28, TotalDiscount);
        }
 
        Double NetSale = entity.getNetSale();
        if (NetSale != null) {
            stmt.bindDouble(29, NetSale);
        }
 
        Double Vatable = entity.getVatable();
        if (Vatable != null) {
            stmt.bindDouble(30, Vatable);
        }
 
        String ProductVATCode = entity.getProductVATCode();
        if (ProductVATCode != null) {
            stmt.bindString(31, ProductVATCode);
        }
 
        String VATDisplay = entity.getVATDisplay();
        if (VATDisplay != null) {
            stmt.bindString(32, VATDisplay);
        }
 
        Double ProductVATPercent = entity.getProductVATPercent();
        if (ProductVATPercent != null) {
            stmt.bindDouble(33, ProductVATPercent);
        }
 
        Double ProductVAT = entity.getProductVAT();
        if (ProductVAT != null) {
            stmt.bindDouble(34, ProductVAT);
        }
 
        Double ProductBeforeVAT = entity.getProductBeforeVAT();
        if (ProductBeforeVAT != null) {
            stmt.bindDouble(35, ProductBeforeVAT);
        }
 
        Double TotalRetailVAT = entity.getTotalRetailVAT();
        if (TotalRetailVAT != null) {
            stmt.bindDouble(36, TotalRetailVAT);
        }
 
        Double DiscVAT = entity.getDiscVAT();
        if (DiscVAT != null) {
            stmt.bindDouble(37, DiscVAT);
        }
 
        Integer IsSCBeforeDisc = entity.getIsSCBeforeDisc();
        if (IsSCBeforeDisc != null) {
            stmt.bindLong(38, IsSCBeforeDisc);
        }
 
        Integer HasServiceCharge = entity.getHasServiceCharge();
        if (HasServiceCharge != null) {
            stmt.bindLong(39, HasServiceCharge);
        }
 
        Double SCPercent = entity.getSCPercent();
        if (SCPercent != null) {
            stmt.bindDouble(40, SCPercent);
        }
 
        Double SCAmount = entity.getSCAmount();
        if (SCAmount != null) {
            stmt.bindDouble(41, SCAmount);
        }
 
        Double SCVAT = entity.getSCVAT();
        if (SCVAT != null) {
            stmt.bindDouble(42, SCVAT);
        }
 
        Double SCBeforeVAT = entity.getSCBeforeVAT();
        if (SCBeforeVAT != null) {
            stmt.bindDouble(43, SCBeforeVAT);
        }
 
        Double WVatable = entity.getWVatable();
        if (WVatable != null) {
            stmt.bindDouble(44, WVatable);
        }
 
        Double SCWAmount = entity.getSCWAmount();
        if (SCWAmount != null) {
            stmt.bindDouble(45, SCWAmount);
        }
 
        Double SCWVAT = entity.getSCWVAT();
        if (SCWVAT != null) {
            stmt.bindDouble(46, SCWVAT);
        }
 
        Double SCWBeforeVAT = entity.getSCWBeforeVAT();
        if (SCWBeforeVAT != null) {
            stmt.bindDouble(47, SCWBeforeVAT);
        }
 
        Double WeightPrice = entity.getWeightPrice();
        if (WeightPrice != null) {
            stmt.bindDouble(48, WeightPrice);
        }
 
        Double WeightPriceVAT = entity.getWeightPriceVAT();
        if (WeightPriceVAT != null) {
            stmt.bindDouble(49, WeightPriceVAT);
        }
 
        Double WeightBeforeVAT = entity.getWeightBeforeVAT();
        if (WeightBeforeVAT != null) {
            stmt.bindDouble(50, WeightBeforeVAT);
        }
 
        String OtherFoodName = entity.getOtherFoodName();
        if (OtherFoodName != null) {
            stmt.bindString(51, OtherFoodName);
        }
 
        Integer OtherProductGroupID = entity.getOtherProductGroupID();
        if (OtherProductGroupID != null) {
            stmt.bindLong(52, OtherProductGroupID);
        }
 
        Integer DiscountAllow = entity.getDiscountAllow();
        if (DiscountAllow != null) {
            stmt.bindLong(53, DiscountAllow);
        }
 
        Integer ItemDiscAllow = entity.getItemDiscAllow();
        if (ItemDiscAllow != null) {
            stmt.bindLong(54, ItemDiscAllow);
        }
 
        Integer LastTransactionID = entity.getLastTransactionID();
        if (LastTransactionID != null) {
            stmt.bindLong(55, LastTransactionID);
        }
 
        Integer LastComputerID = entity.getLastComputerID();
        if (LastComputerID != null) {
            stmt.bindLong(56, LastComputerID);
        }
 
        Integer PrinterID = entity.getPrinterID();
        if (PrinterID != null) {
            stmt.bindLong(57, PrinterID);
        }
 
        Integer InventoryID = entity.getInventoryID();
        if (InventoryID != null) {
            stmt.bindLong(58, InventoryID);
        }
 
        Integer OrderStaffID = entity.getOrderStaffID();
        if (OrderStaffID != null) {
            stmt.bindLong(59, OrderStaffID);
        }
 
        Integer OrderComputerID = entity.getOrderComputerID();
        if (OrderComputerID != null) {
            stmt.bindLong(60, OrderComputerID);
        }
 
        Integer OrderTableID = entity.getOrderTableID();
        if (OrderTableID != null) {
            stmt.bindLong(61, OrderTableID);
        }
 
        Integer VoidTypeID = entity.getVoidTypeID();
        if (VoidTypeID != null) {
            stmt.bindLong(62, VoidTypeID);
        }
 
        Integer VoidStaffID = entity.getVoidStaffID();
        if (VoidStaffID != null) {
            stmt.bindLong(63, VoidStaffID);
        }
 
        java.util.Date VoidDateTime = entity.getVoidDateTime();
        if (VoidDateTime != null) {
            stmt.bindLong(64, VoidDateTime.getTime());
        }
 
        Integer VATType = entity.getVATType();
        if (VATType != null) {
            stmt.bindLong(65, VATType);
        }
 
        Integer PrintGroup = entity.getPrintGroup();
        if (PrintGroup != null) {
            stmt.bindLong(66, PrintGroup);
        }
 
        Integer NoPrintBill = entity.getNoPrintBill();
        if (NoPrintBill != null) {
            stmt.bindLong(67, NoPrintBill);
        }
 
        Integer NoRePrintOrder = entity.getNoRePrintOrder();
        if (NoRePrintOrder != null) {
            stmt.bindLong(68, NoRePrintOrder);
        }
 
        java.util.Date StartTime = entity.getStartTime();
        if (StartTime != null) {
            stmt.bindLong(69, StartTime.getTime());
        }
 
        java.util.Date FinishTime = entity.getFinishTime();
        if (FinishTime != null) {
            stmt.bindLong(70, FinishTime.getTime());
        }
 
        Integer PrintStatus = entity.getPrintStatus();
        if (PrintStatus != null) {
            stmt.bindLong(71, PrintStatus);
        }
 
        Integer ProcessID = entity.getProcessID();
        if (ProcessID != null) {
            stmt.bindLong(72, ProcessID);
        }
 
        java.util.Date SubmitOrderDateTime = entity.getSubmitOrderDateTime();
        if (SubmitOrderDateTime != null) {
            stmt.bindLong(73, SubmitOrderDateTime.getTime());
        }
 
        String Comment = entity.getComment();
        if (Comment != null) {
            stmt.bindString(74, Comment);
        }
 
        Integer IsComment = entity.getIsComment();
        if (IsComment != null) {
            stmt.bindLong(75, IsComment);
        }
 
        Integer Deleted = entity.getDeleted();
        if (Deleted != null) {
            stmt.bindLong(76, Deleted);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public OrderDetail readEntity(Cursor cursor, int offset) {
        OrderDetail entity = new OrderDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // OrderDetailID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // TransactionID
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // ComputerID
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // ComponentLevel
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // OrderDetailLinkID
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // InsertOrderNo
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // IndentLevel
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // DisplayOrdering
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // SaleDate
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // ShopID
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // ProductID
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // ProductSetType
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // OrderStatusID
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // SaleMode
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // TotalQty
            cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15), // PricePerUnit
            cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16), // TotalRetailPrice
            cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17), // OrgPricePerUnit
            cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18), // OrgTotalRetailPrice
            cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19), // DiscPrice
            cursor.isNull(offset + 20) ? null : cursor.getDouble(offset + 20), // DiscPercent
            cursor.isNull(offset + 21) ? null : cursor.getDouble(offset + 21), // DiscAmount
            cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22), // DiscOtherPercent
            cursor.isNull(offset + 23) ? null : cursor.getDouble(offset + 23), // DiscOther
            cursor.isNull(offset + 24) ? null : cursor.getDouble(offset + 24), // TotalItemDisc
            cursor.isNull(offset + 25) ? null : cursor.getDouble(offset + 25), // SalePrice
            cursor.isNull(offset + 26) ? null : cursor.getDouble(offset + 26), // DiscBill
            cursor.isNull(offset + 27) ? null : cursor.getDouble(offset + 27), // TotalDiscount
            cursor.isNull(offset + 28) ? null : cursor.getDouble(offset + 28), // NetSale
            cursor.isNull(offset + 29) ? null : cursor.getDouble(offset + 29), // Vatable
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // ProductVATCode
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // VATDisplay
            cursor.isNull(offset + 32) ? null : cursor.getDouble(offset + 32), // ProductVATPercent
            cursor.isNull(offset + 33) ? null : cursor.getDouble(offset + 33), // ProductVAT
            cursor.isNull(offset + 34) ? null : cursor.getDouble(offset + 34), // ProductBeforeVAT
            cursor.isNull(offset + 35) ? null : cursor.getDouble(offset + 35), // TotalRetailVAT
            cursor.isNull(offset + 36) ? null : cursor.getDouble(offset + 36), // DiscVAT
            cursor.isNull(offset + 37) ? null : cursor.getInt(offset + 37), // IsSCBeforeDisc
            cursor.isNull(offset + 38) ? null : cursor.getInt(offset + 38), // HasServiceCharge
            cursor.isNull(offset + 39) ? null : cursor.getDouble(offset + 39), // SCPercent
            cursor.isNull(offset + 40) ? null : cursor.getDouble(offset + 40), // SCAmount
            cursor.isNull(offset + 41) ? null : cursor.getDouble(offset + 41), // SCVAT
            cursor.isNull(offset + 42) ? null : cursor.getDouble(offset + 42), // SCBeforeVAT
            cursor.isNull(offset + 43) ? null : cursor.getDouble(offset + 43), // WVatable
            cursor.isNull(offset + 44) ? null : cursor.getDouble(offset + 44), // SCWAmount
            cursor.isNull(offset + 45) ? null : cursor.getDouble(offset + 45), // SCWVAT
            cursor.isNull(offset + 46) ? null : cursor.getDouble(offset + 46), // SCWBeforeVAT
            cursor.isNull(offset + 47) ? null : cursor.getDouble(offset + 47), // WeightPrice
            cursor.isNull(offset + 48) ? null : cursor.getDouble(offset + 48), // WeightPriceVAT
            cursor.isNull(offset + 49) ? null : cursor.getDouble(offset + 49), // WeightBeforeVAT
            cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50), // OtherFoodName
            cursor.isNull(offset + 51) ? null : cursor.getInt(offset + 51), // OtherProductGroupID
            cursor.isNull(offset + 52) ? null : cursor.getInt(offset + 52), // DiscountAllow
            cursor.isNull(offset + 53) ? null : cursor.getInt(offset + 53), // ItemDiscAllow
            cursor.isNull(offset + 54) ? null : cursor.getInt(offset + 54), // LastTransactionID
            cursor.isNull(offset + 55) ? null : cursor.getInt(offset + 55), // LastComputerID
            cursor.isNull(offset + 56) ? null : cursor.getInt(offset + 56), // PrinterID
            cursor.isNull(offset + 57) ? null : cursor.getInt(offset + 57), // InventoryID
            cursor.isNull(offset + 58) ? null : cursor.getInt(offset + 58), // OrderStaffID
            cursor.isNull(offset + 59) ? null : cursor.getInt(offset + 59), // OrderComputerID
            cursor.isNull(offset + 60) ? null : cursor.getInt(offset + 60), // OrderTableID
            cursor.isNull(offset + 61) ? null : cursor.getInt(offset + 61), // VoidTypeID
            cursor.isNull(offset + 62) ? null : cursor.getInt(offset + 62), // VoidStaffID
            cursor.isNull(offset + 63) ? null : new java.util.Date(cursor.getLong(offset + 63)), // VoidDateTime
            cursor.isNull(offset + 64) ? null : cursor.getInt(offset + 64), // VATType
            cursor.isNull(offset + 65) ? null : cursor.getInt(offset + 65), // PrintGroup
            cursor.isNull(offset + 66) ? null : cursor.getInt(offset + 66), // NoPrintBill
            cursor.isNull(offset + 67) ? null : cursor.getInt(offset + 67), // NoRePrintOrder
            cursor.isNull(offset + 68) ? null : new java.util.Date(cursor.getLong(offset + 68)), // StartTime
            cursor.isNull(offset + 69) ? null : new java.util.Date(cursor.getLong(offset + 69)), // FinishTime
            cursor.isNull(offset + 70) ? null : cursor.getInt(offset + 70), // PrintStatus
            cursor.isNull(offset + 71) ? null : cursor.getInt(offset + 71), // ProcessID
            cursor.isNull(offset + 72) ? null : new java.util.Date(cursor.getLong(offset + 72)), // SubmitOrderDateTime
            cursor.isNull(offset + 73) ? null : cursor.getString(offset + 73), // Comment
            cursor.isNull(offset + 74) ? null : cursor.getInt(offset + 74), // IsComment
            cursor.isNull(offset + 75) ? null : cursor.getInt(offset + 75) // Deleted
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OrderDetail entity, int offset) {
        entity.setOrderDetailID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setTransactionID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setComputerID(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setComponentLevel(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setOrderDetailLinkID(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setInsertOrderNo(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setIndentLevel(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setDisplayOrdering(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setSaleDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setShopID(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setProductID(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setProductSetType(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setOrderStatusID(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setSaleMode(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setTotalQty(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setPricePerUnit(cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15));
        entity.setTotalRetailPrice(cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16));
        entity.setOrgPricePerUnit(cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17));
        entity.setOrgTotalRetailPrice(cursor.isNull(offset + 18) ? null : cursor.getDouble(offset + 18));
        entity.setDiscPrice(cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19));
        entity.setDiscPercent(cursor.isNull(offset + 20) ? null : cursor.getDouble(offset + 20));
        entity.setDiscAmount(cursor.isNull(offset + 21) ? null : cursor.getDouble(offset + 21));
        entity.setDiscOtherPercent(cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22));
        entity.setDiscOther(cursor.isNull(offset + 23) ? null : cursor.getDouble(offset + 23));
        entity.setTotalItemDisc(cursor.isNull(offset + 24) ? null : cursor.getDouble(offset + 24));
        entity.setSalePrice(cursor.isNull(offset + 25) ? null : cursor.getDouble(offset + 25));
        entity.setDiscBill(cursor.isNull(offset + 26) ? null : cursor.getDouble(offset + 26));
        entity.setTotalDiscount(cursor.isNull(offset + 27) ? null : cursor.getDouble(offset + 27));
        entity.setNetSale(cursor.isNull(offset + 28) ? null : cursor.getDouble(offset + 28));
        entity.setVatable(cursor.isNull(offset + 29) ? null : cursor.getDouble(offset + 29));
        entity.setProductVATCode(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setVATDisplay(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setProductVATPercent(cursor.isNull(offset + 32) ? null : cursor.getDouble(offset + 32));
        entity.setProductVAT(cursor.isNull(offset + 33) ? null : cursor.getDouble(offset + 33));
        entity.setProductBeforeVAT(cursor.isNull(offset + 34) ? null : cursor.getDouble(offset + 34));
        entity.setTotalRetailVAT(cursor.isNull(offset + 35) ? null : cursor.getDouble(offset + 35));
        entity.setDiscVAT(cursor.isNull(offset + 36) ? null : cursor.getDouble(offset + 36));
        entity.setIsSCBeforeDisc(cursor.isNull(offset + 37) ? null : cursor.getInt(offset + 37));
        entity.setHasServiceCharge(cursor.isNull(offset + 38) ? null : cursor.getInt(offset + 38));
        entity.setSCPercent(cursor.isNull(offset + 39) ? null : cursor.getDouble(offset + 39));
        entity.setSCAmount(cursor.isNull(offset + 40) ? null : cursor.getDouble(offset + 40));
        entity.setSCVAT(cursor.isNull(offset + 41) ? null : cursor.getDouble(offset + 41));
        entity.setSCBeforeVAT(cursor.isNull(offset + 42) ? null : cursor.getDouble(offset + 42));
        entity.setWVatable(cursor.isNull(offset + 43) ? null : cursor.getDouble(offset + 43));
        entity.setSCWAmount(cursor.isNull(offset + 44) ? null : cursor.getDouble(offset + 44));
        entity.setSCWVAT(cursor.isNull(offset + 45) ? null : cursor.getDouble(offset + 45));
        entity.setSCWBeforeVAT(cursor.isNull(offset + 46) ? null : cursor.getDouble(offset + 46));
        entity.setWeightPrice(cursor.isNull(offset + 47) ? null : cursor.getDouble(offset + 47));
        entity.setWeightPriceVAT(cursor.isNull(offset + 48) ? null : cursor.getDouble(offset + 48));
        entity.setWeightBeforeVAT(cursor.isNull(offset + 49) ? null : cursor.getDouble(offset + 49));
        entity.setOtherFoodName(cursor.isNull(offset + 50) ? null : cursor.getString(offset + 50));
        entity.setOtherProductGroupID(cursor.isNull(offset + 51) ? null : cursor.getInt(offset + 51));
        entity.setDiscountAllow(cursor.isNull(offset + 52) ? null : cursor.getInt(offset + 52));
        entity.setItemDiscAllow(cursor.isNull(offset + 53) ? null : cursor.getInt(offset + 53));
        entity.setLastTransactionID(cursor.isNull(offset + 54) ? null : cursor.getInt(offset + 54));
        entity.setLastComputerID(cursor.isNull(offset + 55) ? null : cursor.getInt(offset + 55));
        entity.setPrinterID(cursor.isNull(offset + 56) ? null : cursor.getInt(offset + 56));
        entity.setInventoryID(cursor.isNull(offset + 57) ? null : cursor.getInt(offset + 57));
        entity.setOrderStaffID(cursor.isNull(offset + 58) ? null : cursor.getInt(offset + 58));
        entity.setOrderComputerID(cursor.isNull(offset + 59) ? null : cursor.getInt(offset + 59));
        entity.setOrderTableID(cursor.isNull(offset + 60) ? null : cursor.getInt(offset + 60));
        entity.setVoidTypeID(cursor.isNull(offset + 61) ? null : cursor.getInt(offset + 61));
        entity.setVoidStaffID(cursor.isNull(offset + 62) ? null : cursor.getInt(offset + 62));
        entity.setVoidDateTime(cursor.isNull(offset + 63) ? null : new java.util.Date(cursor.getLong(offset + 63)));
        entity.setVATType(cursor.isNull(offset + 64) ? null : cursor.getInt(offset + 64));
        entity.setPrintGroup(cursor.isNull(offset + 65) ? null : cursor.getInt(offset + 65));
        entity.setNoPrintBill(cursor.isNull(offset + 66) ? null : cursor.getInt(offset + 66));
        entity.setNoRePrintOrder(cursor.isNull(offset + 67) ? null : cursor.getInt(offset + 67));
        entity.setStartTime(cursor.isNull(offset + 68) ? null : new java.util.Date(cursor.getLong(offset + 68)));
        entity.setFinishTime(cursor.isNull(offset + 69) ? null : new java.util.Date(cursor.getLong(offset + 69)));
        entity.setPrintStatus(cursor.isNull(offset + 70) ? null : cursor.getInt(offset + 70));
        entity.setProcessID(cursor.isNull(offset + 71) ? null : cursor.getInt(offset + 71));
        entity.setSubmitOrderDateTime(cursor.isNull(offset + 72) ? null : new java.util.Date(cursor.getLong(offset + 72)));
        entity.setComment(cursor.isNull(offset + 73) ? null : cursor.getString(offset + 73));
        entity.setIsComment(cursor.isNull(offset + 74) ? null : cursor.getInt(offset + 74));
        entity.setDeleted(cursor.isNull(offset + 75) ? null : cursor.getInt(offset + 75));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(OrderDetail entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(OrderDetail entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
