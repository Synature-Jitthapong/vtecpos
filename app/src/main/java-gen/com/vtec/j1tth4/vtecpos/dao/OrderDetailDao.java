package com.vtec.j1tth4.vtecpos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vtec.j1tth4.vtecpos.dao.OrderDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ORDER_DETAIL.
*/
public class OrderDetailDao extends AbstractDao<OrderDetail, Integer> {

    public static final String TABLENAME = "ORDER_DETAIL";

    /**
     * Properties of entity OrderDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property OrderDetailID = new Property(0, int.class, "OrderDetailID", true, "ORDER_DETAIL_ID");
        public final static Property TransactionID = new Property(1, int.class, "TransactionID", false, "TRANSACTION_ID");
        public final static Property ComputerID = new Property(2, int.class, "ComputerID", false, "COMPUTER_ID");
        public final static Property OrderDetailLevel = new Property(3, Integer.class, "OrderDetailLevel", false, "ORDER_DETAIL_LEVEL");
        public final static Property OrderDetailLinkID = new Property(4, Integer.class, "OrderDetailLinkID", false, "ORDER_DETAIL_LINK_ID");
        public final static Property SaleDate = new Property(5, java.util.Date.class, "SaleDate", false, "SALE_DATE");
        public final static Property ShopID = new Property(6, int.class, "ShopID", false, "SHOP_ID");
        public final static Property ProductID = new Property(7, int.class, "ProductID", false, "PRODUCT_ID");
        public final static Property ProductSetType = new Property(8, int.class, "ProductSetType", false, "PRODUCT_SET_TYPE");
        public final static Property OrderStatusID = new Property(9, int.class, "OrderStatusID", false, "ORDER_STATUS_ID");
        public final static Property SaleMode = new Property(10, int.class, "SaleMode", false, "SALE_MODE");
        public final static Property TotalQty = new Property(11, double.class, "TotalQty", false, "TOTAL_QTY");
        public final static Property RetailPrice = new Property(12, double.class, "RetailPrice", false, "RETAIL_PRICE");
        public final static Property TotalRetailPrice = new Property(13, double.class, "TotalRetailPrice", false, "TOTAL_RETAIL_PRICE");
        public final static Property TotalDiscount = new Property(14, double.class, "TotalDiscount", false, "TOTAL_DISCOUNT");
        public final static Property SalePrice = new Property(15, double.class, "SalePrice", false, "SALE_PRICE");
        public final static Property ProductVATCode = new Property(16, String.class, "ProductVATCode", false, "PRODUCT_VATCODE");
        public final static Property ProductVATPercent = new Property(17, double.class, "ProductVATPercent", false, "PRODUCT_VATPERCENT");
        public final static Property ProductVAT = new Property(18, double.class, "ProductVAT", false, "PRODUCT_VAT");
        public final static Property HasServiceCharge = new Property(19, Integer.class, "HasServiceCharge", false, "HAS_SERVICE_CHARGE");
        public final static Property ServiceCharge = new Property(20, Double.class, "ServiceCharge", false, "SERVICE_CHARGE");
        public final static Property ServiceChargeVAT = new Property(21, Double.class, "ServiceChargeVAT", false, "SERVICE_CHARGE_VAT");
        public final static Property WeightPrice = new Property(22, Double.class, "WeightPrice", false, "WEIGHT_PRICE");
        public final static Property WeightPriceVAT = new Property(23, Double.class, "WeightPriceVAT", false, "WEIGHT_PRICE_VAT");
        public final static Property OtherFoodName = new Property(24, String.class, "OtherFoodName", false, "OTHER_FOOD_NAME");
        public final static Property OtherProductGroupID = new Property(25, Integer.class, "OtherProductGroupID", false, "OTHER_PRODUCT_GROUP_ID");
        public final static Property DiscountAllow = new Property(26, Integer.class, "DiscountAllow", false, "DISCOUNT_ALLOW");
        public final static Property LastTransactionID = new Property(27, Integer.class, "LastTransactionID", false, "LAST_TRANSACTION_ID");
        public final static Property LastComputerID = new Property(28, Integer.class, "LastComputerID", false, "LAST_COMPUTER_ID");
        public final static Property PrinterID = new Property(29, Integer.class, "PrinterID", false, "PRINTER_ID");
        public final static Property InventoryID = new Property(30, Integer.class, "InventoryID", false, "INVENTORY_ID");
        public final static Property OrderStaffID = new Property(31, Integer.class, "OrderStaffID", false, "ORDER_STAFF_ID");
        public final static Property OrderComputerID = new Property(32, Integer.class, "OrderComputerID", false, "ORDER_COMPUTER_ID");
        public final static Property OrderTableID = new Property(33, Integer.class, "OrderTableID", false, "ORDER_TABLE_ID");
        public final static Property VoidTypeID = new Property(34, Integer.class, "VoidTypeID", false, "VOID_TYPE_ID");
        public final static Property VoidStaffID = new Property(35, Integer.class, "VoidStaffID", false, "VOID_STAFF_ID");
        public final static Property VATType = new Property(36, Integer.class, "VATType", false, "VATTYPE");
        public final static Property PrintGroup = new Property(37, Integer.class, "PrintGroup", false, "PRINT_GROUP");
        public final static Property NoPrintBill = new Property(38, Integer.class, "NoPrintBill", false, "NO_PRINT_BILL");
        public final static Property NoRePrintOrder = new Property(39, Integer.class, "NoRePrintOrder", false, "NO_RE_PRINT_ORDER");
        public final static Property StartTime = new Property(40, java.util.Date.class, "StartTime", false, "START_TIME");
        public final static Property FinishTime = new Property(41, java.util.Date.class, "FinishTime", false, "FINISH_TIME");
        public final static Property PrintStatus = new Property(42, Integer.class, "PrintStatus", false, "PRINT_STATUS");
        public final static Property ProcessID = new Property(43, Integer.class, "ProcessID", false, "PROCESS_ID");
        public final static Property SubmitOrderDateTime = new Property(44, java.util.Date.class, "SubmitOrderDateTime", false, "SUBMIT_ORDER_DATE_TIME");
        public final static Property Comment = new Property(45, String.class, "Comment", false, "COMMENT");
        public final static Property Deleted = new Property(46, Integer.class, "Deleted", false, "DELETED");
    };


    public OrderDetailDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ORDER_DETAIL' (" + //
                "'ORDER_DETAIL_ID' INTEGER PRIMARY KEY NOT NULL ," + // 0: OrderDetailID
                "'TRANSACTION_ID' INTEGER NOT NULL ," + // 1: TransactionID
                "'COMPUTER_ID' INTEGER NOT NULL ," + // 2: ComputerID
                "'ORDER_DETAIL_LEVEL' INTEGER," + // 3: OrderDetailLevel
                "'ORDER_DETAIL_LINK_ID' INTEGER," + // 4: OrderDetailLinkID
                "'SALE_DATE' INTEGER NOT NULL ," + // 5: SaleDate
                "'SHOP_ID' INTEGER NOT NULL ," + // 6: ShopID
                "'PRODUCT_ID' INTEGER NOT NULL ," + // 7: ProductID
                "'PRODUCT_SET_TYPE' INTEGER NOT NULL ," + // 8: ProductSetType
                "'ORDER_STATUS_ID' INTEGER NOT NULL ," + // 9: OrderStatusID
                "'SALE_MODE' INTEGER NOT NULL ," + // 10: SaleMode
                "'TOTAL_QTY' REAL NOT NULL ," + // 11: TotalQty
                "'RETAIL_PRICE' REAL NOT NULL ," + // 12: RetailPrice
                "'TOTAL_RETAIL_PRICE' REAL NOT NULL ," + // 13: TotalRetailPrice
                "'TOTAL_DISCOUNT' REAL NOT NULL ," + // 14: TotalDiscount
                "'SALE_PRICE' REAL NOT NULL ," + // 15: SalePrice
                "'PRODUCT_VATCODE' TEXT NOT NULL ," + // 16: ProductVATCode
                "'PRODUCT_VATPERCENT' REAL NOT NULL ," + // 17: ProductVATPercent
                "'PRODUCT_VAT' REAL NOT NULL ," + // 18: ProductVAT
                "'HAS_SERVICE_CHARGE' INTEGER," + // 19: HasServiceCharge
                "'SERVICE_CHARGE' REAL," + // 20: ServiceCharge
                "'SERVICE_CHARGE_VAT' REAL," + // 21: ServiceChargeVAT
                "'WEIGHT_PRICE' REAL," + // 22: WeightPrice
                "'WEIGHT_PRICE_VAT' REAL," + // 23: WeightPriceVAT
                "'OTHER_FOOD_NAME' TEXT," + // 24: OtherFoodName
                "'OTHER_PRODUCT_GROUP_ID' INTEGER," + // 25: OtherProductGroupID
                "'DISCOUNT_ALLOW' INTEGER," + // 26: DiscountAllow
                "'LAST_TRANSACTION_ID' INTEGER," + // 27: LastTransactionID
                "'LAST_COMPUTER_ID' INTEGER," + // 28: LastComputerID
                "'PRINTER_ID' INTEGER," + // 29: PrinterID
                "'INVENTORY_ID' INTEGER," + // 30: InventoryID
                "'ORDER_STAFF_ID' INTEGER," + // 31: OrderStaffID
                "'ORDER_COMPUTER_ID' INTEGER," + // 32: OrderComputerID
                "'ORDER_TABLE_ID' INTEGER," + // 33: OrderTableID
                "'VOID_TYPE_ID' INTEGER," + // 34: VoidTypeID
                "'VOID_STAFF_ID' INTEGER," + // 35: VoidStaffID
                "'VATTYPE' INTEGER," + // 36: VATType
                "'PRINT_GROUP' INTEGER," + // 37: PrintGroup
                "'NO_PRINT_BILL' INTEGER," + // 38: NoPrintBill
                "'NO_RE_PRINT_ORDER' INTEGER," + // 39: NoRePrintOrder
                "'START_TIME' INTEGER," + // 40: StartTime
                "'FINISH_TIME' INTEGER," + // 41: FinishTime
                "'PRINT_STATUS' INTEGER," + // 42: PrintStatus
                "'PROCESS_ID' INTEGER," + // 43: ProcessID
                "'SUBMIT_ORDER_DATE_TIME' INTEGER," + // 44: SubmitOrderDateTime
                "'COMMENT' TEXT," + // 45: Comment
                "'DELETED' INTEGER);"); // 46: Deleted
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "trans_order_idx ON ORDER_DETAIL" +
                " (TRANSACTION_ID);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ORDER_DETAIL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OrderDetail entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getOrderDetailID());
        stmt.bindLong(2, entity.getTransactionID());
        stmt.bindLong(3, entity.getComputerID());
 
        Integer OrderDetailLevel = entity.getOrderDetailLevel();
        if (OrderDetailLevel != null) {
            stmt.bindLong(4, OrderDetailLevel);
        }
 
        Integer OrderDetailLinkID = entity.getOrderDetailLinkID();
        if (OrderDetailLinkID != null) {
            stmt.bindLong(5, OrderDetailLinkID);
        }
        stmt.bindLong(6, entity.getSaleDate().getTime());
        stmt.bindLong(7, entity.getShopID());
        stmt.bindLong(8, entity.getProductID());
        stmt.bindLong(9, entity.getProductSetType());
        stmt.bindLong(10, entity.getOrderStatusID());
        stmt.bindLong(11, entity.getSaleMode());
        stmt.bindDouble(12, entity.getTotalQty());
        stmt.bindDouble(13, entity.getRetailPrice());
        stmt.bindDouble(14, entity.getTotalRetailPrice());
        stmt.bindDouble(15, entity.getTotalDiscount());
        stmt.bindDouble(16, entity.getSalePrice());
        stmt.bindString(17, entity.getProductVATCode());
        stmt.bindDouble(18, entity.getProductVATPercent());
        stmt.bindDouble(19, entity.getProductVAT());
 
        Integer HasServiceCharge = entity.getHasServiceCharge();
        if (HasServiceCharge != null) {
            stmt.bindLong(20, HasServiceCharge);
        }
 
        Double ServiceCharge = entity.getServiceCharge();
        if (ServiceCharge != null) {
            stmt.bindDouble(21, ServiceCharge);
        }
 
        Double ServiceChargeVAT = entity.getServiceChargeVAT();
        if (ServiceChargeVAT != null) {
            stmt.bindDouble(22, ServiceChargeVAT);
        }
 
        Double WeightPrice = entity.getWeightPrice();
        if (WeightPrice != null) {
            stmt.bindDouble(23, WeightPrice);
        }
 
        Double WeightPriceVAT = entity.getWeightPriceVAT();
        if (WeightPriceVAT != null) {
            stmt.bindDouble(24, WeightPriceVAT);
        }
 
        String OtherFoodName = entity.getOtherFoodName();
        if (OtherFoodName != null) {
            stmt.bindString(25, OtherFoodName);
        }
 
        Integer OtherProductGroupID = entity.getOtherProductGroupID();
        if (OtherProductGroupID != null) {
            stmt.bindLong(26, OtherProductGroupID);
        }
 
        Integer DiscountAllow = entity.getDiscountAllow();
        if (DiscountAllow != null) {
            stmt.bindLong(27, DiscountAllow);
        }
 
        Integer LastTransactionID = entity.getLastTransactionID();
        if (LastTransactionID != null) {
            stmt.bindLong(28, LastTransactionID);
        }
 
        Integer LastComputerID = entity.getLastComputerID();
        if (LastComputerID != null) {
            stmt.bindLong(29, LastComputerID);
        }
 
        Integer PrinterID = entity.getPrinterID();
        if (PrinterID != null) {
            stmt.bindLong(30, PrinterID);
        }
 
        Integer InventoryID = entity.getInventoryID();
        if (InventoryID != null) {
            stmt.bindLong(31, InventoryID);
        }
 
        Integer OrderStaffID = entity.getOrderStaffID();
        if (OrderStaffID != null) {
            stmt.bindLong(32, OrderStaffID);
        }
 
        Integer OrderComputerID = entity.getOrderComputerID();
        if (OrderComputerID != null) {
            stmt.bindLong(33, OrderComputerID);
        }
 
        Integer OrderTableID = entity.getOrderTableID();
        if (OrderTableID != null) {
            stmt.bindLong(34, OrderTableID);
        }
 
        Integer VoidTypeID = entity.getVoidTypeID();
        if (VoidTypeID != null) {
            stmt.bindLong(35, VoidTypeID);
        }
 
        Integer VoidStaffID = entity.getVoidStaffID();
        if (VoidStaffID != null) {
            stmt.bindLong(36, VoidStaffID);
        }
 
        Integer VATType = entity.getVATType();
        if (VATType != null) {
            stmt.bindLong(37, VATType);
        }
 
        Integer PrintGroup = entity.getPrintGroup();
        if (PrintGroup != null) {
            stmt.bindLong(38, PrintGroup);
        }
 
        Integer NoPrintBill = entity.getNoPrintBill();
        if (NoPrintBill != null) {
            stmt.bindLong(39, NoPrintBill);
        }
 
        Integer NoRePrintOrder = entity.getNoRePrintOrder();
        if (NoRePrintOrder != null) {
            stmt.bindLong(40, NoRePrintOrder);
        }
 
        java.util.Date StartTime = entity.getStartTime();
        if (StartTime != null) {
            stmt.bindLong(41, StartTime.getTime());
        }
 
        java.util.Date FinishTime = entity.getFinishTime();
        if (FinishTime != null) {
            stmt.bindLong(42, FinishTime.getTime());
        }
 
        Integer PrintStatus = entity.getPrintStatus();
        if (PrintStatus != null) {
            stmt.bindLong(43, PrintStatus);
        }
 
        Integer ProcessID = entity.getProcessID();
        if (ProcessID != null) {
            stmt.bindLong(44, ProcessID);
        }
 
        java.util.Date SubmitOrderDateTime = entity.getSubmitOrderDateTime();
        if (SubmitOrderDateTime != null) {
            stmt.bindLong(45, SubmitOrderDateTime.getTime());
        }
 
        String Comment = entity.getComment();
        if (Comment != null) {
            stmt.bindString(46, Comment);
        }
 
        Integer Deleted = entity.getDeleted();
        if (Deleted != null) {
            stmt.bindLong(47, Deleted);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OrderDetail readEntity(Cursor cursor, int offset) {
        OrderDetail entity = new OrderDetail( //
            cursor.getInt(offset + 0), // OrderDetailID
            cursor.getInt(offset + 1), // TransactionID
            cursor.getInt(offset + 2), // ComputerID
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // OrderDetailLevel
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // OrderDetailLinkID
            new java.util.Date(cursor.getLong(offset + 5)), // SaleDate
            cursor.getInt(offset + 6), // ShopID
            cursor.getInt(offset + 7), // ProductID
            cursor.getInt(offset + 8), // ProductSetType
            cursor.getInt(offset + 9), // OrderStatusID
            cursor.getInt(offset + 10), // SaleMode
            cursor.getDouble(offset + 11), // TotalQty
            cursor.getDouble(offset + 12), // RetailPrice
            cursor.getDouble(offset + 13), // TotalRetailPrice
            cursor.getDouble(offset + 14), // TotalDiscount
            cursor.getDouble(offset + 15), // SalePrice
            cursor.getString(offset + 16), // ProductVATCode
            cursor.getDouble(offset + 17), // ProductVATPercent
            cursor.getDouble(offset + 18), // ProductVAT
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // HasServiceCharge
            cursor.isNull(offset + 20) ? null : cursor.getDouble(offset + 20), // ServiceCharge
            cursor.isNull(offset + 21) ? null : cursor.getDouble(offset + 21), // ServiceChargeVAT
            cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22), // WeightPrice
            cursor.isNull(offset + 23) ? null : cursor.getDouble(offset + 23), // WeightPriceVAT
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // OtherFoodName
            cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25), // OtherProductGroupID
            cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26), // DiscountAllow
            cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27), // LastTransactionID
            cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28), // LastComputerID
            cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29), // PrinterID
            cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30), // InventoryID
            cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31), // OrderStaffID
            cursor.isNull(offset + 32) ? null : cursor.getInt(offset + 32), // OrderComputerID
            cursor.isNull(offset + 33) ? null : cursor.getInt(offset + 33), // OrderTableID
            cursor.isNull(offset + 34) ? null : cursor.getInt(offset + 34), // VoidTypeID
            cursor.isNull(offset + 35) ? null : cursor.getInt(offset + 35), // VoidStaffID
            cursor.isNull(offset + 36) ? null : cursor.getInt(offset + 36), // VATType
            cursor.isNull(offset + 37) ? null : cursor.getInt(offset + 37), // PrintGroup
            cursor.isNull(offset + 38) ? null : cursor.getInt(offset + 38), // NoPrintBill
            cursor.isNull(offset + 39) ? null : cursor.getInt(offset + 39), // NoRePrintOrder
            cursor.isNull(offset + 40) ? null : new java.util.Date(cursor.getLong(offset + 40)), // StartTime
            cursor.isNull(offset + 41) ? null : new java.util.Date(cursor.getLong(offset + 41)), // FinishTime
            cursor.isNull(offset + 42) ? null : cursor.getInt(offset + 42), // PrintStatus
            cursor.isNull(offset + 43) ? null : cursor.getInt(offset + 43), // ProcessID
            cursor.isNull(offset + 44) ? null : new java.util.Date(cursor.getLong(offset + 44)), // SubmitOrderDateTime
            cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45), // Comment
            cursor.isNull(offset + 46) ? null : cursor.getInt(offset + 46) // Deleted
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OrderDetail entity, int offset) {
        entity.setOrderDetailID(cursor.getInt(offset + 0));
        entity.setTransactionID(cursor.getInt(offset + 1));
        entity.setComputerID(cursor.getInt(offset + 2));
        entity.setOrderDetailLevel(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setOrderDetailLinkID(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setSaleDate(new java.util.Date(cursor.getLong(offset + 5)));
        entity.setShopID(cursor.getInt(offset + 6));
        entity.setProductID(cursor.getInt(offset + 7));
        entity.setProductSetType(cursor.getInt(offset + 8));
        entity.setOrderStatusID(cursor.getInt(offset + 9));
        entity.setSaleMode(cursor.getInt(offset + 10));
        entity.setTotalQty(cursor.getDouble(offset + 11));
        entity.setRetailPrice(cursor.getDouble(offset + 12));
        entity.setTotalRetailPrice(cursor.getDouble(offset + 13));
        entity.setTotalDiscount(cursor.getDouble(offset + 14));
        entity.setSalePrice(cursor.getDouble(offset + 15));
        entity.setProductVATCode(cursor.getString(offset + 16));
        entity.setProductVATPercent(cursor.getDouble(offset + 17));
        entity.setProductVAT(cursor.getDouble(offset + 18));
        entity.setHasServiceCharge(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setServiceCharge(cursor.isNull(offset + 20) ? null : cursor.getDouble(offset + 20));
        entity.setServiceChargeVAT(cursor.isNull(offset + 21) ? null : cursor.getDouble(offset + 21));
        entity.setWeightPrice(cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22));
        entity.setWeightPriceVAT(cursor.isNull(offset + 23) ? null : cursor.getDouble(offset + 23));
        entity.setOtherFoodName(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setOtherProductGroupID(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
        entity.setDiscountAllow(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
        entity.setLastTransactionID(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
        entity.setLastComputerID(cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28));
        entity.setPrinterID(cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29));
        entity.setInventoryID(cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30));
        entity.setOrderStaffID(cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31));
        entity.setOrderComputerID(cursor.isNull(offset + 32) ? null : cursor.getInt(offset + 32));
        entity.setOrderTableID(cursor.isNull(offset + 33) ? null : cursor.getInt(offset + 33));
        entity.setVoidTypeID(cursor.isNull(offset + 34) ? null : cursor.getInt(offset + 34));
        entity.setVoidStaffID(cursor.isNull(offset + 35) ? null : cursor.getInt(offset + 35));
        entity.setVATType(cursor.isNull(offset + 36) ? null : cursor.getInt(offset + 36));
        entity.setPrintGroup(cursor.isNull(offset + 37) ? null : cursor.getInt(offset + 37));
        entity.setNoPrintBill(cursor.isNull(offset + 38) ? null : cursor.getInt(offset + 38));
        entity.setNoRePrintOrder(cursor.isNull(offset + 39) ? null : cursor.getInt(offset + 39));
        entity.setStartTime(cursor.isNull(offset + 40) ? null : new java.util.Date(cursor.getLong(offset + 40)));
        entity.setFinishTime(cursor.isNull(offset + 41) ? null : new java.util.Date(cursor.getLong(offset + 41)));
        entity.setPrintStatus(cursor.isNull(offset + 42) ? null : cursor.getInt(offset + 42));
        entity.setProcessID(cursor.isNull(offset + 43) ? null : cursor.getInt(offset + 43));
        entity.setSubmitOrderDateTime(cursor.isNull(offset + 44) ? null : new java.util.Date(cursor.getLong(offset + 44)));
        entity.setComment(cursor.isNull(offset + 45) ? null : cursor.getString(offset + 45));
        entity.setDeleted(cursor.isNull(offset + 46) ? null : cursor.getInt(offset + 46));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(OrderDetail entity, long rowId) {
        return entity.getOrderDetailID();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(OrderDetail entity) {
        if(entity != null) {
            return entity.getOrderDetailID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
