package com.vtec.j1tth4.vtecpos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vtec.j1tth4.vtecpos.dao.Staffs;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Staffs.
*/
public class StaffsDao extends AbstractDao<Staffs, Integer> {

    public static final String TABLENAME = "Staffs";

    /**
     * Properties of entity Staffs.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property StaffID = new Property(0, int.class, "StaffID", true, "STAFF_ID");
        public final static Property StaffRoleID = new Property(1, int.class, "StaffRoleID", false, "STAFF_ROLE_ID");
        public final static Property StaffPassword = new Property(2, String.class, "StaffPassword", false, "STAFF_PASSWORD");
        public final static Property StaffCode = new Property(3, String.class, "StaffCode", false, "STAFF_CODE");
        public final static Property StaffGender = new Property(4, Integer.class, "StaffGender", false, "STAFF_GENDER");
        public final static Property StaffFirstName = new Property(5, String.class, "StaffFirstName", false, "STAFF_FIRST_NAME");
        public final static Property StaffLastName = new Property(6, String.class, "StaffLastName", false, "STAFF_LAST_NAME");
        public final static Property StaffAddress1 = new Property(7, String.class, "StaffAddress1", false, "STAFF_ADDRESS1");
        public final static Property StaffAddress2 = new Property(8, String.class, "StaffAddress2", false, "STAFF_ADDRESS2");
        public final static Property StaffCity = new Property(9, String.class, "StaffCity", false, "STAFF_CITY");
        public final static Property StaffProvince = new Property(10, Integer.class, "StaffProvince", false, "STAFF_PROVINCE");
        public final static Property StaffZipCode = new Property(11, String.class, "StaffZipCode", false, "STAFF_ZIP_CODE");
        public final static Property StaffTelephone = new Property(12, String.class, "StaffTelephone", false, "STAFF_TELEPHONE");
        public final static Property StaffMobile = new Property(13, String.class, "StaffMobile", false, "STAFF_MOBILE");
        public final static Property StaffEmail = new Property(14, String.class, "StaffEmail", false, "STAFF_EMAIL");
        public final static Property StaffBirthDay = new Property(15, java.util.Date.class, "StaffBirthDay", false, "STAFF_BIRTH_DAY");
        public final static Property StaffAdditional = new Property(16, String.class, "StaffAdditional", false, "STAFF_ADDITIONAL");
        public final static Property StaffIDNumber = new Property(17, String.class, "StaffIDNumber", false, "STAFF_IDNUMBER");
        public final static Property StaffIDIssueDate = new Property(18, java.util.Date.class, "StaffIDIssueDate", false, "STAFF_IDISSUE_DATE");
        public final static Property StaffIDExpiration = new Property(19, java.util.Date.class, "StaffIDExpiration", false, "STAFF_IDEXPIRATION");
        public final static Property StaffBlood = new Property(20, String.class, "StaffBlood", false, "STAFF_BLOOD");
        public final static Property StaffPictureFileServer = new Property(21, String.class, "StaffPictureFileServer", false, "STAFF_PICTURE_FILE_SERVER");
        public final static Property StaffPictureFileClient = new Property(22, String.class, "StaffPictureFileClient", false, "STAFF_PICTURE_FILE_CLIENT");
        public final static Property BasedSalary = new Property(23, Double.class, "BasedSalary", false, "BASED_SALARY");
        public final static Property LangID = new Property(24, Integer.class, "LangID", false, "LANG_ID");
        public final static Property InputDate = new Property(25, java.util.Date.class, "InputDate", false, "INPUT_DATE");
        public final static Property InputBy = new Property(26, Integer.class, "InputBy", false, "INPUT_BY");
        public final static Property UpdateDate = new Property(27, java.util.Date.class, "UpdateDate", false, "UPDATE_DATE");
        public final static Property UpdateBy = new Property(28, Integer.class, "UpdateBy", false, "UPDATE_BY");
        public final static Property LastUseDate = new Property(29, java.util.Date.class, "LastUseDate", false, "LAST_USE_DATE");
        public final static Property Activated = new Property(30, Integer.class, "Activated", false, "ACTIVATED");
        public final static Property Deleted = new Property(31, Integer.class, "Deleted", false, "DELETED");
        public final static Property AddingFromBranch = new Property(32, Integer.class, "AddingFromBranch", false, "ADDING_FROM_BRANCH");
    };


    public StaffsDao(DaoConfig config) {
        super(config);
    }
    
    public StaffsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Staffs entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getStaffID());
        stmt.bindLong(2, entity.getStaffRoleID());
        stmt.bindString(3, entity.getStaffPassword());
        stmt.bindString(4, entity.getStaffCode());
 
        Integer StaffGender = entity.getStaffGender();
        if (StaffGender != null) {
            stmt.bindLong(5, StaffGender);
        }
        stmt.bindString(6, entity.getStaffFirstName());
        stmt.bindString(7, entity.getStaffLastName());
 
        String StaffAddress1 = entity.getStaffAddress1();
        if (StaffAddress1 != null) {
            stmt.bindString(8, StaffAddress1);
        }
 
        String StaffAddress2 = entity.getStaffAddress2();
        if (StaffAddress2 != null) {
            stmt.bindString(9, StaffAddress2);
        }
 
        String StaffCity = entity.getStaffCity();
        if (StaffCity != null) {
            stmt.bindString(10, StaffCity);
        }
 
        Integer StaffProvince = entity.getStaffProvince();
        if (StaffProvince != null) {
            stmt.bindLong(11, StaffProvince);
        }
 
        String StaffZipCode = entity.getStaffZipCode();
        if (StaffZipCode != null) {
            stmt.bindString(12, StaffZipCode);
        }
 
        String StaffTelephone = entity.getStaffTelephone();
        if (StaffTelephone != null) {
            stmt.bindString(13, StaffTelephone);
        }
 
        String StaffMobile = entity.getStaffMobile();
        if (StaffMobile != null) {
            stmt.bindString(14, StaffMobile);
        }
 
        String StaffEmail = entity.getStaffEmail();
        if (StaffEmail != null) {
            stmt.bindString(15, StaffEmail);
        }
 
        java.util.Date StaffBirthDay = entity.getStaffBirthDay();
        if (StaffBirthDay != null) {
            stmt.bindLong(16, StaffBirthDay.getTime());
        }
 
        String StaffAdditional = entity.getStaffAdditional();
        if (StaffAdditional != null) {
            stmt.bindString(17, StaffAdditional);
        }
 
        String StaffIDNumber = entity.getStaffIDNumber();
        if (StaffIDNumber != null) {
            stmt.bindString(18, StaffIDNumber);
        }
 
        java.util.Date StaffIDIssueDate = entity.getStaffIDIssueDate();
        if (StaffIDIssueDate != null) {
            stmt.bindLong(19, StaffIDIssueDate.getTime());
        }
 
        java.util.Date StaffIDExpiration = entity.getStaffIDExpiration();
        if (StaffIDExpiration != null) {
            stmt.bindLong(20, StaffIDExpiration.getTime());
        }
 
        String StaffBlood = entity.getStaffBlood();
        if (StaffBlood != null) {
            stmt.bindString(21, StaffBlood);
        }
 
        String StaffPictureFileServer = entity.getStaffPictureFileServer();
        if (StaffPictureFileServer != null) {
            stmt.bindString(22, StaffPictureFileServer);
        }
 
        String StaffPictureFileClient = entity.getStaffPictureFileClient();
        if (StaffPictureFileClient != null) {
            stmt.bindString(23, StaffPictureFileClient);
        }
 
        Double BasedSalary = entity.getBasedSalary();
        if (BasedSalary != null) {
            stmt.bindDouble(24, BasedSalary);
        }
 
        Integer LangID = entity.getLangID();
        if (LangID != null) {
            stmt.bindLong(25, LangID);
        }
 
        java.util.Date InputDate = entity.getInputDate();
        if (InputDate != null) {
            stmt.bindLong(26, InputDate.getTime());
        }
 
        Integer InputBy = entity.getInputBy();
        if (InputBy != null) {
            stmt.bindLong(27, InputBy);
        }
 
        java.util.Date UpdateDate = entity.getUpdateDate();
        if (UpdateDate != null) {
            stmt.bindLong(28, UpdateDate.getTime());
        }
 
        Integer UpdateBy = entity.getUpdateBy();
        if (UpdateBy != null) {
            stmt.bindLong(29, UpdateBy);
        }
 
        java.util.Date LastUseDate = entity.getLastUseDate();
        if (LastUseDate != null) {
            stmt.bindLong(30, LastUseDate.getTime());
        }
 
        Integer Activated = entity.getActivated();
        if (Activated != null) {
            stmt.bindLong(31, Activated);
        }
 
        Integer Deleted = entity.getDeleted();
        if (Deleted != null) {
            stmt.bindLong(32, Deleted);
        }
 
        Integer AddingFromBranch = entity.getAddingFromBranch();
        if (AddingFromBranch != null) {
            stmt.bindLong(33, AddingFromBranch);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Staffs readEntity(Cursor cursor, int offset) {
        Staffs entity = new Staffs( //
            cursor.getInt(offset + 0), // StaffID
            cursor.getInt(offset + 1), // StaffRoleID
            cursor.getString(offset + 2), // StaffPassword
            cursor.getString(offset + 3), // StaffCode
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // StaffGender
            cursor.getString(offset + 5), // StaffFirstName
            cursor.getString(offset + 6), // StaffLastName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // StaffAddress1
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // StaffAddress2
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // StaffCity
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // StaffProvince
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // StaffZipCode
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // StaffTelephone
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // StaffMobile
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // StaffEmail
            cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)), // StaffBirthDay
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // StaffAdditional
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // StaffIDNumber
            cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)), // StaffIDIssueDate
            cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)), // StaffIDExpiration
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // StaffBlood
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // StaffPictureFileServer
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // StaffPictureFileClient
            cursor.isNull(offset + 23) ? null : cursor.getDouble(offset + 23), // BasedSalary
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // LangID
            cursor.isNull(offset + 25) ? null : new java.util.Date(cursor.getLong(offset + 25)), // InputDate
            cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26), // InputBy
            cursor.isNull(offset + 27) ? null : new java.util.Date(cursor.getLong(offset + 27)), // UpdateDate
            cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28), // UpdateBy
            cursor.isNull(offset + 29) ? null : new java.util.Date(cursor.getLong(offset + 29)), // LastUseDate
            cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30), // Activated
            cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31), // Deleted
            cursor.isNull(offset + 32) ? null : cursor.getInt(offset + 32) // AddingFromBranch
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Staffs entity, int offset) {
        entity.setStaffID(cursor.getInt(offset + 0));
        entity.setStaffRoleID(cursor.getInt(offset + 1));
        entity.setStaffPassword(cursor.getString(offset + 2));
        entity.setStaffCode(cursor.getString(offset + 3));
        entity.setStaffGender(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setStaffFirstName(cursor.getString(offset + 5));
        entity.setStaffLastName(cursor.getString(offset + 6));
        entity.setStaffAddress1(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStaffAddress2(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStaffCity(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStaffProvince(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setStaffZipCode(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setStaffTelephone(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setStaffMobile(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setStaffEmail(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setStaffBirthDay(cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)));
        entity.setStaffAdditional(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setStaffIDNumber(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setStaffIDIssueDate(cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)));
        entity.setStaffIDExpiration(cursor.isNull(offset + 19) ? null : new java.util.Date(cursor.getLong(offset + 19)));
        entity.setStaffBlood(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setStaffPictureFileServer(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setStaffPictureFileClient(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setBasedSalary(cursor.isNull(offset + 23) ? null : cursor.getDouble(offset + 23));
        entity.setLangID(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setInputDate(cursor.isNull(offset + 25) ? null : new java.util.Date(cursor.getLong(offset + 25)));
        entity.setInputBy(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
        entity.setUpdateDate(cursor.isNull(offset + 27) ? null : new java.util.Date(cursor.getLong(offset + 27)));
        entity.setUpdateBy(cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28));
        entity.setLastUseDate(cursor.isNull(offset + 29) ? null : new java.util.Date(cursor.getLong(offset + 29)));
        entity.setActivated(cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30));
        entity.setDeleted(cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31));
        entity.setAddingFromBranch(cursor.isNull(offset + 32) ? null : cursor.getInt(offset + 32));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(Staffs entity, long rowId) {
        return entity.getStaffID();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(Staffs entity) {
        if(entity != null) {
            return entity.getStaffID();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
