package com.vtec.j1tth4.vtecpos.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vtec.j1tth4.vtecpos.dao.FcTranDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table fc_trandetail.
*/
public class FcTranDetailDao extends AbstractDao<FcTranDetail, Void> {

    public static final String TABLENAME = "fc_trandetail";

    /**
     * Properties of entity FcTranDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property OrderDetailID = new Property(0, Integer.class, "OrderDetailID", true, "OrderDetailID");
        public final static Property TransactionID = new Property(1, Integer.class, "TransactionID", true, "TransactionID");
        public final static Property ComputerID = new Property(2, Integer.class, "ComputerID", true, "ComputerID");
        public final static Property CardID = new Property(3, Integer.class, "CardID", false, "CardID");
        public final static Property CardNo = new Property(4, String.class, "CardNo", false, "CardNo");
        public final static Property ShopID = new Property(5, Integer.class, "ShopID", false, "ShopID");
        public final static Property SaleDate = new Property(6, java.util.Date.class, "SaleDate", false, "SaleDate");
        public final static Property TranAmount = new Property(7, Double.class, "TranAmount", false, "TranAmount");
        public final static Property RecordStatus = new Property(8, Integer.class, "RecordStatus", false, "RecordStatus");
        public final static Property InsertDate = new Property(9, java.util.Date.class, "InsertDate", false, "InsertDate");
    };


    public FcTranDetailDao(DaoConfig config) {
        super(config);
    }
    
    public FcTranDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FcTranDetail entity) {
        stmt.clearBindings();
 
        Integer OrderDetailID = entity.getOrderDetailID();
        if (OrderDetailID != null) {
            stmt.bindLong(1, OrderDetailID);
        }
 
        Integer TransactionID = entity.getTransactionID();
        if (TransactionID != null) {
            stmt.bindLong(2, TransactionID);
        }
 
        Integer ComputerID = entity.getComputerID();
        if (ComputerID != null) {
            stmt.bindLong(3, ComputerID);
        }
 
        Integer CardID = entity.getCardID();
        if (CardID != null) {
            stmt.bindLong(4, CardID);
        }
 
        String CardNo = entity.getCardNo();
        if (CardNo != null) {
            stmt.bindString(5, CardNo);
        }
 
        Integer ShopID = entity.getShopID();
        if (ShopID != null) {
            stmt.bindLong(6, ShopID);
        }
 
        java.util.Date SaleDate = entity.getSaleDate();
        if (SaleDate != null) {
            stmt.bindLong(7, SaleDate.getTime());
        }
 
        Double TranAmount = entity.getTranAmount();
        if (TranAmount != null) {
            stmt.bindDouble(8, TranAmount);
        }
 
        Integer RecordStatus = entity.getRecordStatus();
        if (RecordStatus != null) {
            stmt.bindLong(9, RecordStatus);
        }
 
        java.util.Date InsertDate = entity.getInsertDate();
        if (InsertDate != null) {
            stmt.bindLong(10, InsertDate.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public FcTranDetail readEntity(Cursor cursor, int offset) {
        FcTranDetail entity = new FcTranDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // OrderDetailID
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // TransactionID
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // ComputerID
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // CardID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CardNo
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // ShopID
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // SaleDate
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // TranAmount
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // RecordStatus
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)) // InsertDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FcTranDetail entity, int offset) {
        entity.setOrderDetailID(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setTransactionID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setComputerID(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setCardID(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCardNo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setShopID(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setSaleDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setTranAmount(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setRecordStatus(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setInsertDate(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(FcTranDetail entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(FcTranDetail entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
